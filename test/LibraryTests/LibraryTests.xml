<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryTests</name>
    </assembly>
    <members>
        <member name="T:ProgramTests.AcceptInvitationTest">
            <summary>
            This Test is for verificates if a Company can accept an invitation to the platform.
            </summary>
        </member>
        <member name="M:ProgramTests.AcceptInvitationTest.Setup">
            <summary>
            Test setup.
            </summary>
        </member>
        <member name="M:ProgramTests.AcceptInvitationTest.AcceptInvitation">
            <summary>
            Test if a company can accept an invitation and register.
            </summary>
        </member>
        <member name="M:ProgramTests.AcceptInvitationTest.NotAcceptInvitation">
            <summary>
            If the user don´t have a code, it´s user is an Entrepreneur.
            </summary>
        </member>
        <member name="T:ProgramTests.CompanyReportTest">
            <summary>
            Test if a company can get a report of all material´s sent.
            </summary>
        </member>
        <member name="M:ProgramTests.CompanyReportTest.Setup">
            <summary>
            Necessary configuration.
            </summary>
        </member>
        <member name="M:ProgramTests.CompanyReportTest.CompanyReport">
            <summary>
            Tests if the company can see the report of the sealed materials.
            </summary>
        </member>
        <member name="M:ProgramTests.CompanyReportTest.CompanyReportOutOfTime">
            <summary>
            Test if the materials sold are out of time.
            </summary>
        </member>
        <member name="T:ProgramTests.CompanyTest">
            <summary>
            This test check if the class Company and CompanyManager and all methods of both classes works.
            </summary>
        </member>
        <member name="M:ProgramTests.CompanyTest.Setup">
            <summary>
            Test Setup.
            </summary>
        </member>
        <member name="M:ProgramTests.CompanyTest.CreateCompanyTest">
            <summary>
            Test if a company can be created and added in list of all companies.
            </summary>
        </member>
        <member name="M:ProgramTests.CompanyTest.HasUserTest">
            <summary>
            This test check if a company can have representants.
            </summary>
        </member>
        <member name="M:ProgramTests.CompanyTest.GetCompanyOfTest">
            <summary>
            This test check GetCompanyOf method of CompanyManager class.
            </summary>
        </member>
        <member name="M:ProgramTests.CompanyTest.GetByNameTest">
            <summary>
            This test check GetByName method of CompanyManager class.
            </summary>
        </member>
        <member name="T:ProgramTests.EntrepreneurRegisterTest">
            <summary>
            Test if an Entrepreneur can register into the platform.
            </summary>
        </member>
        <member name="M:ProgramTests.EntrepreneurRegisterTest.Setup">
            <summary>
            It´s create a message with the information correspondent.
            </summary>
        </member>
        <member name="M:ProgramTests.EntrepreneurRegisterTest.EntrepreneurRegister">
            <summary>
            This test evaluate if the entrepreneur is registered with their correct information.
            </summary>
        </member>
        <member name="M:ProgramTests.EntrepreneurRegisterTest.EntrepreneurRegisterFromUserInput">
            <summary>
            Tests the course of registering an entrepreneur from user input.
            </summary>
        </member>
        <member name="T:ProgramTests.EntrepreneurReportTest">
            <summary>
            This test check if the Entrepreneur can get an received material report.
            </summary>
        </member>
        <member name="M:ProgramTests.EntrepreneurReportTest.Setup">
            <summary>
            Test Setup.
            </summary>
        </member>
        <member name="M:ProgramTests.EntrepreneurReportTest.EntrepreneurReport">
            <summary>
            This test evaluate if the material was added in the report of purchased materials.
            </summary>
        </member>
        <member name="T:ProgramTests.InviteCompanyTest">
            <summary>
            Test if a Company can be invited to the platform.
            </summary>
        </member>
        <member name="M:ProgramTests.InviteCompanyTest.Setup">
            <summary>
            Test SetUp.
            </summary>
        </member>
        <member name="M:ProgramTests.InviteCompanyTest.InviteCompany">
            <summary>
            This test proves that as an admin I can create an invitation
            As we can't expect a certain invitation code because it's
            generated randomly, we check if the list of invitations has
            the same number of invitations as expected.
            </summary>
        </member>
        <member name="T:ProgramTests.PublishOfferTest">
            <summary>
            Tests if a company can publish an offer for entrepreneurs.
            </summary>
        </member>
        <member name="M:ProgramTests.PublishOfferTest.Setup">
            <summary>
            Setup config test.
            </summary>
        </member>
        <member name="M:ProgramTests.PublishOfferTest.PublishOffer">
            <summary>
            Test if the company publish the offer, the entrepreneur can see it.
            </summary>
        </member>
        <member name="M:ProgramTests.PublishOfferTest.NotPublishOffer">
            <summary>
            Test when a company not publish other offer.
            </summary>
        </member>
        <member name="T:ProgramTests.SearchOffersTest">
            <summary>
            This test proves that a entrepreneur can search material
            publication's using a keyword, category or zone.
            </summary>
        </member>
        <member name="M:ProgramTests.SearchOffersTest.Setup">
            <summary>
            Test Setup.
            </summary>
        </member>
        <member name="M:ProgramTests.SearchOffersTest.SearchOffersbyCategoryFound">
            <summary>
            This test checks that an entrepreneur is able to
            search material publication's by the category.
            </summary>
        </member>
        <member name="M:ProgramTests.SearchOffersTest.SearchOffersbyCategoryNotFound">
            <summary>
            This test checks that if an entrepreneur searches
            for a category that didn't exist it returns a list
            with 0 elements.
            </summary>
        </member>
        <member name="M:ProgramTests.SearchOffersTest.SearchOffersbyKeywordsFound">
            <summary>
            This test checks that an entrepreneur is able to
            search material publication's with a keyword.
            </summary>
        </member>
        <member name="M:ProgramTests.SearchOffersTest.SearchOffersbyKeywordsNotFound">
            <summary>
            This test checks that if an entrepreneur searches
            for a keyword that isn't included in a publication
            it returns a list with 0 elements.
            </summary>
        </member>
        <member name="M:ProgramTests.SearchOffersTest.SearchOffersbyZoneFound">
            <summary>
            This test checks that an entrepreneur is able to
            search material publication's by the zone.
            </summary>
        </member>
        <member name="M:ProgramTests.SearchOffersTest.SearchOffersbyZoneNotFound">
            <summary>
            This test checks that if an entrepreneur searches
            for a zone that isn't included in a publication or is to
            far away form the distance specified, it returns a list with 0 elements.
            </summary>
        </member>
<<<<<<< HEAD
=======
        <member name="T:UnitTests.AdminStatesTest">
            <summary>
            This class represents unit tests related to admin states.
            </summary>
        </member>
        <member name="M:UnitTests.AdminStatesTest.TestAdminCreateInvitation">
            <summary>
            Tests the class <see cref="T:Library.States.Admins.AdminInitialMenuState" />'s /createcompany option.
            </summary>
        </member>
        <member name="T:UnitTests.FormProcessorTest">
            <summary>
            This class represents unit tests concerning the class <see cref="T:Library.InputHandlers.Abstractions.BaseFormProcessor`2" />.
            </summary>
        </member>
        <member name="M:UnitTests.FormProcessorTest.FormProcessorBasicTest">
            <summary>
            Tests the functionality itself of the <see cref="T:Library.InputHandlers.Abstractions.BaseFormProcessor`2" />.
            </summary>
        </member>
>>>>>>> master
        <member name="T:UnitTests.InvitationListTest">
            <summary>
            This class represents tests concerning the <see cref="T:Library.Core.Invitations.InvitationList`1" /> class.
            </summary>
        </member>
        <member name="M:UnitTests.InvitationListTest.SetUp">
            <summary>
            Setup function.
            </summary>
        </member>
        <member name="M:UnitTests.InvitationListTest.TestInvitationList">
            <summary>
            Tests whether adding invitations via the <see cref="T:Library.Core.Invitations.InvitationManager" /> adds them in the <see cref="T:Library.Core.Invitations.InvitationList`1" />,<br />
            and whether validating them removes them.
            </summary>
        </member>
        <member name="M:UnitTests.InvitationListTest.CustomInvitation.Validate(System.String)">
            <inheritdoc />
        </member>
<<<<<<< HEAD
=======
        <member name="T:UnitTests.ListProcessorTest">
            <summary>
            This class represents unit tests related to the class <see cref="T:Library.InputHandlers.Abstractions.ListProcessor`1" /> as a subclass of <see cref="T:Library.Core.Processing.InputProcessor`1" /> of a list of elements.
            </summary>
        </member>
        <member name="M:UnitTests.ListProcessorTest.ListProcessorBasicTest">
            <summary>
            Tests the basic workings of the list processor: adding elements and submitting them.
            </summary>
        </member>
        <member name="M:UnitTests.ListProcessorTest.ListProcessorRemoveElementsTest">
            <summary>
            Tests the functionality of removing elements.
            </summary>
        </member>
        <member name="M:UnitTests.ListProcessorTest.ListProcessorGoBackTest">
            <summary>
            Tests the functionality of giving an interrupt signal.
            </summary>
        </member>
        <member name="T:UnitTests.ProgramaticPlatform">
            <summary>
            Acts as a messaging platform in which the messages it sends are determined in advance.
            </summary>
        </member>
        <member name="P:UnitTests.ProgramaticPlatform.ReceivedMessages">
            <summary>
            The received messages.
            </summary>
        </member>
        <member name="M:UnitTests.ProgramaticPlatform.#ctor(System.String,System.String[])">
            <summary>
            Initializes an instance of <see cref="T:UnitTests.ProgramaticPlatform" />
            </summary>
            <param name="id">The platform's id.</param>
            <param name="messages">The messages to send.</param>
        </member>
        <member name="M:UnitTests.ProgramaticPlatform.GetUserId(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:UnitTests.ProgramaticPlatform.SendMessage(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:UnitTests.ProgramaticPlatform.Run">
            <summary>
            Receives messages from the console as if it was a messaging platform.
            </summary>
        </member>
        <member name="T:UnitTests.Utils.BasicUtils">
            <summary>
            This class contains functions which perform common actions in the unit tests.
            </summary>
        </member>
        <member name="M:UnitTests.Utils.BasicUtils.CreateUser(Library.Core.State)">
            <summary>
            Creates a new user with the id "___".
            </summary>
            <param name="state">The state of the user.</param>
        </member>
        <member name="M:UnitTests.Utils.BasicUtils.EmptyUserData">
            <summary>
            Creates an empty user data for mock users.
            </summary>
            <returns>A <see cref="T:Library.Core.UserData" /></returns>
        </member>
>>>>>>> master
    </members>
</doc>
