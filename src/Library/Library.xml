<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Core.ContactInfo">
            <summary>
            This struct represents contact information data associated with a user,
            a company, or another entity with contact information.
            </summary>
        </member>
        <member name="F:Library.Core.ContactInfo.Email">
            <summary>
            The entity's email (null if non-existent).
            </summary>
        </member>
        <member name="F:Library.Core.ContactInfo.PhoneNumber">
            <summary>
            The entity's phone number (-1 if non-existent).
            </summary>
        </member>
        <member name="T:Library.Core.Distribution.MessageManager">
            <summary>
            This class represents the highest level of encapsulation in message processing.
            </summary>
        </member>
        <member name="M:Library.Core.Distribution.MessageManager.ProcessMessage(Library.Core.Message)">
            <summary>
            Processes a received message, returning the text of the response message.
            </summary>
            <param name="msg">The received message.</param>
            <returns>The response message's text.</returns>
        </member>
        <member name="T:Library.Core.Distribution.SessionManager">
            <summary>
            This class handles the creation and selection of user sessions.
            </summary>
        </member>
        <member name="F:Library.Core.Distribution.SessionManager.sessions">
            <summary>
            The list of current sessions.
            </summary>
        </member>
        <member name="M:Library.Core.Distribution.SessionManager.GetById(System.String)">
            <summary>
            Returns the <see cref="T:Library.Core.Distribution.UserSession" /> whose id equals to the given one.
            </summary>
            <param name="id">The given id.</param>
            <returns>Its corresponding <see cref="T:Library.Core.Distribution.UserSession" />, or null if there isn't.</returns>
        </member>
        <member name="M:Library.Core.Distribution.SessionManager.NewUser(System.String,Library.Core.UserData,Library.Core.State)">
            <summary>
            Adds a new user into the platform.
            </summary>
            <param name="id">The user's id.</param>
            <param name="userData">The user's data.</param>
            <param name="state">The user's initial state.</param>
            <returns>The resulting <see cref="T:Library.Core.Distribution.UserSession" />, or null if there's already one.</returns>
        </member>
        <member name="T:Library.Core.Distribution.UserSession">
            <summary>
            This class represent a user's session, being the highest-level class which represents it.
            </summary>
        </member>
        <member name="F:Library.Core.Distribution.UserSession.Id">
            <summary>
            The id of the user.
            </summary>
        </member>
        <member name="F:Library.Core.Distribution.UserSession.userData">
            <summary>
            Data associated with the user.
            </summary>
        </member>
        <member name="F:Library.Core.Distribution.UserSession.state">
            <summary>
            The current state of the user's session.
            </summary>
        </member>
        <member name="M:Library.Core.Distribution.UserSession.#ctor(System.String,Library.Core.UserData,Library.Core.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.Core.Distribution.UserSession"/> class.
            </summary>
            <param name="id">The session's user's id.</param>
            <param name="userData">The session's user's data.</param>
            <param name="state">The session's initial state.</param>
        </member>
        <member name="M:Library.Core.Distribution.UserSession.ProcessMessage(System.String)">
            <summary>
            Process the received message text, returning the response message text.
            </summary>
            <param name="msg">The received message text.</param>
            <returns>The response message text.</returns>
        </member>
        <member name="M:Library.Core.Distribution.UserSession.MatchesId(System.String)">
            <summary>
            Checks whether this <see cref="T:Library.Core.Distribution.UserSession" /> has a concrete user id.
            </summary>
            <param name="id">The id to compare with.</param>
            <returns>True uf the ID´s are equal and false if it not does.</returns>
        </member>
        <member name="T:Library.Core.Invitations.Invitation">
            <summary>
            This class represents invitations, through which admins can invite other non-registered users into the platform.
            </summary>
        </member>
        <member name="P:Library.Core.Invitations.Invitation.Code">
            <summary>
            Gets the invitation's code.
            </summary>
        </member>
        <member name="M:Library.Core.Invitations.Invitation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.Core.Invitations.Invitation"/> class.
            </summary>
            <param name="code">Invitation´s code.</param>
        </member>
        <member name="M:Library.Core.Invitations.Invitation.Validate(System.String)">
            <summary>
            Validates the invitation, returning the response string for that activity.
            </summary>
            <param name="userId">The id of the user who validated the invitation.</param>
            <returns>The response string.</returns>
        </member>
        <member name="T:Library.Core.Invitations.InvitationList`1">
            <summary>
            This class represents a list of invitations of a concrete class.
            </summary>
            <typeparam name="T">The class of the invitations.</typeparam>
        </member>
        <member name="F:Library.Core.Invitations.InvitationList`1.removers">
            <summary>
            Gets the list of functions which remove invitations from the <see cref="T:Library.Core.Invitations.InvitationList`1" /> instances.
            </summary>
        </member>
        <member name="F:Library.Core.Invitations.InvitationList`1.Instance">
            <summary>
            The instance of the <see cref="T:Library.Core.Invitations.InvitationList`1" />.
            </summary>
        </member>
        <member name="F:Library.Core.Invitations.InvitationList`1.invitations">
            <summary>
            The set of invitations.
            It's an <see cref="T:System.Collections.Generic.ISet`1" /> due to ISP,
            since only its functionality as a set is used.
            </summary>
        </member>
        <member name="P:Library.Core.Invitations.InvitationList`1.Invitations">
            <summary>
            Gets the set of invitations.<br />
            This property is used to serialize and deserialize invitations from JSON.
            </summary>
        </member>
        <member name="M:Library.Core.Invitations.InvitationList`1.AddInvitation(`0)">
            <summary>
            Adds an invitation into the set.<br />
            This function should only be used by the <see cref="M:Library.Core.Invitations.InvitationManager.CreateInvitation``1(System.String,System.Func{System.String,``0})" /> function.<br />
            For other contexts, use <see cref="M:Library.Core.Invitations.InvitationManager.CreateInvitation``1(System.String,System.Func{System.String,``0})" />.
            </summary>
            <param name="invitation">The invitation.</param>
        </member>
        <member name="T:Library.Core.Invitations.InvitationManager">
            <summary>
            This class acts as the highest level of abstraccion in invitation handling.
            </summary>
        </member>
        <member name="F:Library.Core.Invitations.InvitationManager.invitations">
            <summary>
            A list of all the invitations.
            </summary>
        </member>
        <member name="P:Library.Core.Invitations.InvitationManager.InvitationCount">
            <summary>
            Gets the number of invitations.
            </summary>
        </member>
        <member name="M:Library.Core.Invitations.InvitationManager.CreateInvitation``1(System.String,System.Func{System.String,``0})">
            <summary>
            Adds an invitation into the list.
            </summary>
            <param name="code">The invitation´s code.</param>
            <param name="f">Function that takes string like a parameter, and return an Invitation.</param>
        </member>
        <member name="M:Library.Core.Invitations.InvitationManager.AddInvitation(Library.Core.Invitations.Invitation)">
            <summary>
            Adds an invitation directly into the list.<br />
            This function should only be used by the <see cref="P:Library.Core.Invitations.InvitationList`1.Invitations" /> setter
            to load invitations which come from JSON data.<br />
            For other contexts, use <see cref="M:Library.Core.Invitations.InvitationManager.CreateInvitation``1(System.String,System.Func{System.String,``0})" />.
            </summary>
            <param name="invitation">The invitation to load.</param>
        </member>
        <member name="M:Library.Core.Invitations.InvitationManager.ValidateInvitation(System.String,System.String)">
            <summary>
            Validates an invitation with a user id, returning the response message of the validation.
            </summary>
            <param name="invitationCode">The invitation's code.</param>
            <param name="userId">The id of the user who validated the invitation.</param>
            <returns>The response message of the validation of the invitation, or an error message if there wasn't.</returns>
        </member>
        <member name="T:Library.Core.Message">
            <summary>
            Represents a message received from a messaging platform.
            </summary>
        </member>
        <member name="F:Library.Core.Message.Text">
            <summary>
            The content of the image.
            </summary>
        </member>
        <member name="F:Library.Core.Message.Id">
            <summary>
            The id of the user who sent the image.
            </summary>
        </member>
        <member name="M:Library.Core.Message.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.Core.Message"/> struct.
            </summary>
            <param name="text">The message's text.</param>
            <param name="id">The message's id.</param>
        </member>
        <member name="T:Library.Core.Messaging.IMessageReceiver`1">
            <summary>
            This interface represents a platform from which the program can receive messages.
            </summary>
            <typeparam name="TId">The type of the ids the platform uses to identify its users.</typeparam>
        </member>
        <member name="M:Library.Core.Messaging.IMessageReceiver`1.GetUserId(`0)">
            <summary>
            Converts a valid id of the platform into a user id.
            </summary>
            <param name="id">The id to convert.</param>
            <returns>The resulting user id.</returns>
        </member>
        <member name="M:Library.Core.Messaging.IMessageReceiver`1.ReceiveMessage(System.String,`0)">
            <summary>
            Handles the event of receiving a message.
            </summary>
            <param name="msg">The message's text.</param>
            <param name="id">The message's id.</param>
        </member>
        <member name="T:Library.Core.Messaging.IMessageSender`1">
            <summary>
            This interface represents a platform from which the program can send messages.
            </summary>
            <typeparam name="TId">The type of the ids the platform uses to identify its users.</typeparam>
        </member>
        <member name="M:Library.Core.Messaging.IMessageSender`1.SendMessage(System.String,`0)">
            <summary>
            Sends a message.
            </summary>
            <param name="msg">The message's text.</param>
            <param name="id">The message's id.</param>
        </member>
        <member name="T:Library.Core.Messaging.MessagingPlatform`1">
            <summary>
            This class represents a platform from which the program can send and receive messages.
            </summary>
            <typeparam name="TId">The type of the ids the platform uses to identify its users.</typeparam>
        </member>
        <member name="M:Library.Core.Messaging.MessagingPlatform`1.SendMessage(System.String,`0)">
            <inheritdoc />
        </member>
        <member name="M:Library.Core.Messaging.MessagingPlatform`1.GetUserId(`0)">
            <inheritdoc />
        </member>
        <member name="M:Library.Core.Messaging.MessagingPlatform`1.ReceiveMessage(System.String,`0)">
            <summary>
            Handles the event of receiving a message, sending a response.
            </summary>
            <param name="msg">The received message's text.</param>
            <param name="id">The received message's user id.</param>
        </member>
        <member name="T:Library.Core.Processing.FormProcessor`1">
            <summary>
            Represent a complex form-like set of data through which certain types of data can be received from user input easily.
            </summary>
            <typeparam name="T">The type of the resulting object.</typeparam>
        </member>
        <member name="F:Library.Core.Processing.FormProcessor`1.inputHandlers">
            <summary>
            The list of input handlers.
            </summary>
        </member>
        <member name="M:Library.Core.Processing.FormProcessor`1.GetDefaultResponse">
            <inheritdoc />
        </member>
        <member name="M:Library.Core.Processing.FormProcessor`1.Library#Core#Processing#IInputHandler#ProcessInput(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Library.Core.Processing.FormProcessor`1.getResult">
            <summary>
            Generates the resulting object with the obtained input.
            </summary>
            <remarks>
                <para>
                This function should be called only after a call to <see cref="M:Library.Core.Processing.IInputHandler.ProcessInput(System.String)" /> returns: <br />
                    Result&lt;bool, string&gt;.Ok(true) <br />
                which is a signal that the object's ready to produce the result. Doing so under other circumstances may result in undefined behaviour.
                </para>
            </remarks>
            <returns>
            Result.Ok(result), being result the resulting object, or<br />
            Result.Err(error), being error an error string.
            </returns>
        </member>
        <member name="T:Library.Core.Processing.IInputHandler">
            <summary>
            Represents the functionality of handling one or more messages input until realizing a certain operation successfully,
            or until the user indicates to stop trying.
            </summary>
        </member>
        <member name="M:Library.Core.Processing.IInputHandler.ProcessInput(System.String)">
            <summary>
            Handles a received input message, returning a success signal,
            a response string (indicating it's not done yet), or an interrupt signal.
            </summary>
            <param name="msg">The input message.</param>
            <returns>
            Result.Err(response), being response a response string, <br />
            Result.Ok(true) for a success signal, or <br />
            Result.Ok(false) for an interrupt signal.
            </returns>
        </member>
        <member name="M:Library.Core.Processing.IInputHandler.GetDefaultResponse">
            <summary>
            Returns the first message the object uses to indicate what kind of input it wants.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Library.Core.Processing.IInputHandler.Reset">
            <summary>
            Resets the processor, so it can be used again.
            </summary>
        </member>
        <member name="T:Library.Core.Processing.IInputProcessor`1">
            <summary>
            Represents the functionality of receiving one or more input messages, and generating an object with that input.
            </summary>
            <typeparam name="T">The type of the resulting object.</typeparam>
        </member>
        <member name="M:Library.Core.Processing.IInputProcessor`1.getResult">
            <summary>
            Generates the resulting object with the obtained input.
            </summary>
            <remarks>
                <para>
                This function should be called only after a call to <see cref="M:Library.Core.Processing.IInputHandler.ProcessInput(System.String)" /> returns: <br />
                    Result&lt;bool, string&gt;.Ok(true) <br />
                which is a signal that the object's ready to produce the result. Doing so under other circumstances may result in undefined behaviour.
                </para>
            </remarks>
            <returns>
            Result.Ok(result), being result the resulting object, or<br />
            Result.Err(error), being error an error string.
            </returns>
        </member>
        <member name="M:Library.Core.Processing.IInputProcessor`1.GenerateFromInput(System.String)">
            <summary>
            Receives an input message, returning the resulting object if it's ready.
            </summary>
            <param name="msg">The input message.</param>
            <returns>
            Option.Some(Result.Ok(result)), being result the resulting object, <br />
            Option.Some(Result.Err(response)), being response a response string, or <br />
            Option.None for an interrupt signal.
            </returns>
        </member>
        <member name="T:Library.Core.State">
            <summary>
            This class represents a state of a user session.
            </summary>
        </member>
        <member name="P:Library.Core.State.IsComplete">
            <summary>
            Determines whether the user who has this <see cref="T:Library.Core.State" /> is complete,
            that is, if the process of registering to the platform has already finished.
            </summary>
        </member>
        <member name="M:Library.Core.State.ProcessMessage(System.String,Library.Core.UserData,System.String)">
            <summary>
            Processes a received message, returning the next state and the response message.
            </summary>
            <param name="id">The user's id.</param>
            <param name="data">The user's data.</param>
            <param name="msg">The message's text.</param>
            <returns>The next state and the response message. If the response message is null, the new state's default message can be used instead.</returns>
        </member>
        <member name="M:Library.Core.State.GetDefaultResponse">
            <summary>
            Returns the first message the object uses to indicate what kind of input it wants.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:Library.Core.UserData">
            <summary>
            This class represents additional data that all users must have.
            </summary>
        </member>
        <member name="F:Library.Core.UserData.Name">
            <summary>
            The user's name.
            </summary>
        </member>
        <member name="F:Library.Core.UserData.ContactInfo">
            <summary>
            The user's contact information.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Accountability.Amount">
            <summary>
            This struct represents an amount of material.
            We used the OCP principle to create this class, we used "readonly"
            to prevent modifications, but it's still open to extension.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Amount.Quantity">
            <summary>
            The numeric value in the amount.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Amount.Unit">
            <summary>
            The unit used in the amount.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.Amount.#ctor(System.Single,Library.HighLevel.Accountability.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.Amount"/> struct.
            </summary>
            <param name="quantity">The numeric value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.BoughtMaterialLine">
            <summary>
            This class represents a material bought by the entrepreneur
            We used the SRP principle, that way material, datetime,
            price, amount are all objects created by his respective class.
            That way we have classes with Low Coupling.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.BoughtMaterialLine.Material">
            <summary>
            The purchased material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.BoughtMaterialLine.DateTime">
            <summary>
            The date of when the purchase was made.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.BoughtMaterialLine.Price">
            <summary>
            The cost of the material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.BoughtMaterialLine.Amount">
            <summary>
            The amount of the purchased material.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.BoughtMaterialLine.#ctor(Library.HighLevel.Materials.Material,System.DateTime,Library.HighLevel.Accountability.Price,Library.HighLevel.Accountability.Amount)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.BoughtMaterialLine"/> class.
            </summary>
            <param name="material">The purchased material.</param>
            <param name="dateTime">The date of when the purchase was made.</param>
            <param name="price">The cost of the material.</param>
            <param name="amount">The amount of the purchased material.</param>
        </member>
        <member name="P:Library.HighLevel.Accountability.BoughtMaterialLine.Spent">
            <summary>
            Gets the amount of money spent.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Accountability.Currency">
            <summary>
            This class represents a currency with which transactions can be made.
            Because of the OCP principle, the attributes are
            readonly, that way this class is open to extension
            but closed to modifications.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Currency.Peso">
            <summary>
            The uruguayan peso.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Currency.Dollar">
            <summary>
            The american dollar.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Currency.Name">
            <summary>
            The currency's name.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Currency.Symbol">
            <summary>
            The currency's symbol.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Accountability.MaterialSalesLine">
            <summary>
            This class represents a concrete material sale.
            Created because of SRP and LSP, so we can use a specific line
            without modifying the report.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MaterialSalesLine.Material">
            <summary>
            The sold material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MaterialSalesLine.Amount">
            <summary>
            The amount of sold material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MaterialSalesLine.Price">
            <summary>
            The price of the sold material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MaterialSalesLine.DateTime">
            <summary>
            The moment the sale happened.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.MaterialSalesLine.#ctor(Library.HighLevel.Materials.Material,Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.MaterialSalesLine"/> class.
            </summary>
            <param name="material">The sold material.</param>
            <param name="amount">The amount of sold material.</param>
            <param name="price">The price of the sold material.</param>
            <param name="dateTime">The moment the sale happened.</param>
        </member>
        <member name="P:Library.HighLevel.Accountability.MaterialSalesLine.Income">
            <summary>
            Gets the amount of money made from this sale.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Accountability.Measure">
            <summary>
            This class represents a measure through which a certain amount of material can be measured.
            We used the pattern Creator, we assigned the method Length and Weigth to Measure because
            it's the class that knows about it.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Measure.Length">
            <summary>
            The length measure.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Measure.Weight">
            <summary>
            The weight measure.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Measure.Name">
            <summary>
            Gets the measure's name.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Measure.units">
            <summary>
            The measure's available units.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.Measure.#ctor(System.String,System.ValueTuple{System.String,System.String,System.Double}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.Measure"/> class, assigning its units in the process.
            </summary>
            <param name="name">The measure's name.</param>
            <param name="unitsData">An array of tuples containing data about its units.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.MoneyQuantity">
            <summary>
            This class represents an amount of money.
            Created because of SRP and Low Coupling and High Cohesion, in that way
            we have this class that has the responsibility of assign an amount of 
            money with his respective quantity and currency (particular of a money quantity)
            with the currency that is controlled by another class currency (following the
            pattern and principle).
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MoneyQuantity.Quantity">
            <summary>
            The numeric value.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MoneyQuantity.Currency">
            <summary>
            The currency.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.MoneyQuantity.#ctor(System.Single,Library.HighLevel.Accountability.Currency)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.MoneyQuantity"/> struct.
            </summary>
            <param name="quantity">The numeric value.</param>
            <param name="currency">The currency.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.Price">
            <summary>
            This struct represents a price.
            Created because of SRP, this class is the one that controls
            the price in specific.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Accountability.Price.Quantity">
            <summary>
            Gets the numeric value.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Accountability.Price.Currency">
            <summary>
            Gets the currency with which the price is determined.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Accountability.Price.Unit">
            <summary>
            Gets the unit of material measurement with which the price is determined.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.Price.#ctor(System.Single,Library.HighLevel.Accountability.Currency,Library.HighLevel.Accountability.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.Price"/> struct.
            </summary>
            <param name="quantity">Material´s Quantity.</param>
            <param name="currency">Material´s publication currency.</param>
            <param name="unit">Material´s unit.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.ReceivedMaterialReport">
            <summary>
            This class represents a reports of all material purchased by the entrepreneur.
            We used the pattern Creator and the SRP principle, that is why this class
            creates a report and not another class to avoid High Coupling.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.ReceivedMaterialReport.Materials">
            <summary>
            The list of purchased materials.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.ReceivedMaterialReport.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Library.HighLevel.Accountability.BoughtMaterialLine})">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.ReceivedMaterialReport"/> class.
            </summary>
            <param name="materials">The collection of purchased materials.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.SentMaterialReport">
            <summary>
            This class represents a report of all materials a company sold over a certain period of time.
            Created because of SRP, a report is conformed by lines (created by another class), that way
            also avoid High Coupling, but have a High Cohesion. At the same time the sent material and
            received one are created by different classes because of polymorphism.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.SentMaterialReport.Lines">
            <summary>
            The list of material sales.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.SentMaterialReport.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Library.HighLevel.Accountability.MaterialSalesLine})">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.SentMaterialReport"/> class.
            </summary>
            <param name="lines">The report's list of material sales.</param>
        </member>
        <member name="M:Library.HighLevel.Accountability.SentMaterialReport.GetSentReport(System.Collections.Generic.IList{Library.HighLevel.Accountability.MaterialSalesLine},System.Int32)">
            <summary>
            This method returns a list of materials that were sold in a certain period of time.
            </summary>
            <param name="materialSales">The list of materials sold.</param>
            <param name="time">The period of time to search.</param>
            <returns>A report of materials sended in a period of time.</returns>
        </member>
        <member name="T:Library.HighLevel.Accountability.Unit">
            <summary>
            This class represent a unit used for measuring amounts of material.
            Created because of SRP, this particular class is the one with the
            responsibility of everything associated with the unit and nothing else
            (following also the Expert principle).
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.Name">
            <summary>
            The unit's name.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.Abbreviation">
            <summary>
            The unit's abbreviation.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.weight">
            <summary>
            A weight associated to the unit to perform conversions with other units of the same measure.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.Measure">
            <summary>
            The measure form which the unit is.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.Values">
            <summary>
            The list of available units.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.Unit.#ctor(System.String,System.String,System.Double,Library.HighLevel.Accountability.Measure)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Accountability.Unit"/> class.
            </summary>
            <param name="name">Unit´s name.</param>
            <param name="abbreviation">Unit´s abbreviation.</param>
            <param name="weight">Unit´s associated weight.</param>
            <param name="measure">Unit´s measure.</param>
        </member>
        <member name="M:Library.HighLevel.Accountability.Unit.GetByAbbr(System.String)">
            <summary>
            Gets the unit which has a concrete abbreviation.
            </summary>
            <param name="abbreviation">The unit's abbreviation.</param>
            <returns>The unit which has a concrete abbreviation.</returns>
        </member>
        <member name="M:Library.HighLevel.Accountability.Unit.GetConversionFactor(Library.HighLevel.Accountability.Unit,Library.HighLevel.Accountability.Unit)">
            <summary>
            Calculates the conversion factor to translate measures from a unit to another.
            </summary>
            <param name="fromUnit">The unit of the initial measure.</param>
            <param name="toUnit">The unit of the final measure.</param>
            <returns>The number to multiply to the initial measure's numeric value to get the final measure's numeric value, or null if the units belong to different measures.</returns>
        </member>
        <member name="M:Library.HighLevel.Accountability.Unit.AreCompatible(Library.HighLevel.Accountability.Unit,Library.HighLevel.Accountability.Unit)">
            <summary>
            Checks whether two units are compatible with each other.
            That is, whether they belong to the same measure.
            </summary>
            <param name="u1">Unit 1 to compare.</param>
            <param name="u2">Unit 2 to compare.</param>
            <returns>Returns true if the units are compatible and false if it not does.</returns>
        </member>
        <member name="T:Library.HighLevel.Administers.Administer">
            <summary>
            This class represents an Administer.
            We used the Expert principle, this class is the one that
            generates the invitations code (as it should be).
            At the same time we used Creator, for example the list of admin
            is created by this class.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Administers.Administer.GenerateInvitation">
            <summary>
            This method create's an invitation code.
            </summary>
            <returns>Invitation´s code.</returns>
        </member>
        <member name="M:Library.HighLevel.Administers.Administer.CreateCompanyInvitation">
            <summary>
            This method creates an invitation for a company.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Companies.Company">
            <summary>
            This class represents a company which can sell materials to entrepreneurs.
            We used the ISP principle, this class does not depend of types it doesn't
            use. We also implemented Creator, this class is the one that creates the
            list of representants. And Expert, the method of checking if the
            company has a representant and add users.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.Name">
            <summary>
            Gets the company's name.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.ContactInfo">
            <summary>
            Gets the company's contact information.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.Heading">
            <summary>
            Gets the company's heading.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.Location">
            <summary>
            Gets the company's location.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Companies.Company.representants">
            <summary>
            The company's representants in the platform.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.Company.#ctor(System.String,Library.Core.ContactInfo,System.String,Ucu.Poo.Locations.Client.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Companies.Company"/> class.
            </summary>
            <param name="name">The company´s name.</param>
            <param name="contactInfo">The company´s contact info.</param>
            <param name="heading">The company´s heading.</param>
            <param name="location">The company´s location.</param>
        </member>
        <member name="M:Library.HighLevel.Companies.Company.HasUser(System.String)">
            <summary>
            Returns whether a user represents this company.
            </summary>
            <param name="id">The user's id.</param>
            <returns>Whether it belongs to the company.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.Company.AddUser(System.String)">
            <summary>
            Adds a user into the list of representants.
            </summary>
            <param name="id">The user's id.</param>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.Library#HighLevel#Companies#IPublisher#publications">
            <summary>
            Gets a list of Material Publications.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.Library#HighLevel#Companies#ISentMaterialReportCreator#materialSales">
            <summary>
            Gets a list of Material Sales.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.Publications">
            <summary>
            Gets the list of publications, dinamically assigned to the company.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Companies.CompanyInvitation">
            <summary>
            Represents an invitation to the platform for a company representative.
            We used the DIP pattern, CompanyInvitation depends of an abstract class.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyInvitation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Companies.CompanyInvitation"/> class.
            </summary>
            <param name="code">The invitation code.</param>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyInvitation.Validate(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Library.HighLevel.Companies.CompanyManager">
            <summary>
            This class represents the highest level of encapsulation in handling companies.
            Created because of SRP and Don't talk to Strangers,
            that way the class CompanyManager is the one responsible of creating the list
            of companies and getting the companies and not Company by itself.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Companies.CompanyManager.companies">
            <summary>
            The list of companies.
            The class <see cref="T:System.Collections.Generic.List`1" /> is used instead of the interface <see cref="T:System.Collections.Generic.IList`1" />
            because the method <see cref="M:System.Collections.Generic.List`1.AsReadOnly" /> is neccesary for the property <see cref="P:Library.HighLevel.Companies.CompanyManager.Companies" />.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.CompanyManager.Companies">
            <summary>
            Gets a public read-only list of the companies.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyManager.GetCompanyOf(System.String)">
            <summary>
            Gets the company a concrete user represents.
            </summary>
            <param name="userId">The user's id.</param>
            <returns>A company, or null if the user doesn't represent a company.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyManager.GetByName(System.String)">
            <summary>
            Gets the <see cref="T:Library.HighLevel.Companies.Company" /> with a concrete name.
            </summary>
            <param name="name">The company's name.</param>
            <returns>A company, or null if there is no company with that name.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyManager.CreateCompany(System.String,Library.Core.ContactInfo,System.String,Ucu.Poo.Locations.Client.Location)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Companies.Company" />, adding it to the list.
            </summary>
            <returns>The created instance, or null if there's already a company with the same name.</returns>
            <param name="name">The company´s name.</param>
            <param name="contactInfo">The company´s contact info.</param>
            <param name="heading">The company´s heading.</param>
            <param name="location">The company´s location.</param>
        </member>
        <member name="P:Library.HighLevel.Companies.CompanyManager.Publications">
            <summary>
            The list of all publications made by all companies.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Companies.IPublisher">
            <summary>
            This interface represents the responsibility of managing material publications.
            We created this interface because of DIP, that way the classes depend of an abstraction.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.IPublisher.publications">
            <summary>
            Gets a private list of the publications.
            The class <see cref="T:System.Collections.Generic.List`1" /> is used instead of the interface <see cref="T:System.Collections.Generic.IList`1" />
            because the method <see cref="M:System.Collections.Generic.List`1.AsReadOnly" /> is neccesary for the property <see cref="P:Library.HighLevel.Companies.IPublisher.Publications" />.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.IPublisher.Publications">
            <summary>
            Gets a public read-only list of the publications.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.IPublisher.PublishMaterial(Library.HighLevel.Materials.Material,Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price,Ucu.Poo.Locations.Client.Location,Library.HighLevel.Materials.MaterialPublicationTypeData,System.Collections.Generic.IList{System.String})">
            <summary>
            Publishes a material.
            </summary>
            <param name="material">The material to publish.</param>
            <param name="amount">The amount of material.</param>
            <param name="price">The price of the material.</param>
            <param name="location">The pick-up location of the material.</param>
            <param name="type">The type of the material publication.</param>
            <param name="keywords">The keywords of the material.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.IPublisher.RemovePublication(System.Int32)">
            <summary>
            Removes a material publication.
            </summary>
            <param name="index">The index of the publication.</param>
            <returns>Whether the removal was successful.</returns>
        </member>
        <member name="T:Library.HighLevel.Companies.ISentMaterialReportCreator">
            <summary>
            This interface represents the responsibility of creating material reports.
            We created this interface because of DIP, that way the classes depend of an abstraction.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.ISentMaterialReportCreator.materialSales">
            <summary>
            Gets the list of material sales.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.ISentMaterialReportCreator.GetMaterialReport(System.DateTime)">
            <summary>
            Builds a <see cref="T:Library.HighLevel.Accountability.SentMaterialReport" /> with the material sales that occured after a certain <see cref="T:System.DateTime" />.
            </summary>
            <param name="dateTime">The lower limit of the moment the sales happened.</param>
            <returns>The <see cref="T:Library.HighLevel.Accountability.SentMaterialReport" />.</returns>
        </member>
        <member name="T:Library.HighLevel.Companies.IReceivedMaterialReportCreator">
            <summary>
            This interface represents a class which can create <see cref="T:Library.HighLevel.Accountability.ReceivedMaterialReport" />s.
            It was created because of DIP, that way the classes depend of an abstraction.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.IReceivedMaterialReportCreator.BoughtMaterials">
            <summary>
            Gets the collection of bought materials.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.IReceivedMaterialReportCreator.GetMaterialReport(System.DateTime)">
            <summary>
            Gets a reports of the purchase made by the entrepreneur.
            </summary>
            <param name="dateTime">It is the time when the entrepreneur bought the material.</param>
            <returns>A <see cref="T:Library.HighLevel.Accountability.ReceivedMaterialReport" />.</returns>
        </member>
        <member name="T:Library.HighLevel.Entrepreneurs.Entrepreneur">
            <summary>
            This class represents an entrepreneur.
            We used the principle Creator to create this class, for
            example, the list of entrepreneur is created here.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Entrepreneurs.Entrepreneur.Id">
            <summary>
            Gets or sets the entrepreneur's id.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Entrepreneurs.Entrepreneur.Name">
            <summary>
            Gets the entrepeneur's name.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Entrepreneurs.Entrepreneur.Age">
            <summary>
            Gets the entrepreneur's age.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Entrepreneurs.Entrepreneur.Location">
            <summary>
            Gets the entrepreneur's location.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Entrepreneurs.Entrepreneur.Heading">
            <summary>
            Gets the entrepreneur's heading.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Entrepreneurs.Entrepreneur.Habilitations">
            <summary>
            Gets the entrepreneur's habilitation needed to buy certain materials.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Entrepreneurs.Entrepreneur.Specializations">
            <summary>
            Gets the entrepreneur's specialization.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Entrepreneurs.Entrepreneur.EntrepeneurList">
            <summary>
            Gets the entrepreneur's users in the platform.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Entrepreneurs.Entrepreneur.Habilitation">
            <summary>
            Gets the entrepreneur's habilitation needed to buy certain materials.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Entrepreneurs.Entrepreneur.#ctor(System.String,System.String,System.String,Ucu.Poo.Locations.Client.Location,System.String,System.Collections.Generic.IList{Library.HighLevel.Materials.Habilitation},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Library.HighLevel.Entrepreneurs.Entrepreneur"/> class.
            </summary>
            <param name="id">Entrepreneur´s id.</param>
            <param name="name">Entrepreneur´s name.</param>
            <param name="age">Entrepreneur´s age.</param>
            <param name="location">Entrepreneur´s location.</param>
            <param name="heading">Entrepreneur´s heading.</param>
            <param name="habilitations">Entrepreneur´s habilitation.</param>
            <param name="specializations">Entrepreneur´s specializations.</param>
        </member>
        <member name="T:Library.HighLevel.Entrepreneurs.EntrepreneurManager">
            <summary>
            This class represents the highest level of encapsulation in handling entrepreneurs.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Entrepreneurs.EntrepreneurManager.entrepeneurs">
            <summary>
            The list of entrepreneurs.
            The class <see cref="T:System.Collections.Generic.List`1" /> is used instead of the interface <see cref="T:System.Collections.Generic.IList`1" />
            because the method <see cref="M:System.Collections.Generic.List`1.AsReadOnly" /> is neccesary for the property <see cref="P:Library.HighLevel.Entrepreneurs.EntrepreneurManager.Entrepreneurs" />.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Entrepreneurs.EntrepreneurManager.Entrepreneurs">
            <summary>
            Gets the entrepreneur's users in the platform.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Entrepreneurs.EntrepreneurManager.NewEntrepreneur(Library.HighLevel.Entrepreneurs.Entrepreneur)">
            <summary>
            Adds a new entrepreneur into the list.
            </summary>
            <param name="entrepreneur">The new entrepreneur.</param>
        </member>
        <member name="T:Library.HighLevel.Entrepreneurs.Searcher">
            <summary>
            This class has the responsibility of searching material publication´s
            according to a specified category, keyword or location.
            We created this class using expert, this class itself does all the possible
            filter searches). It also has a High Cohesion because of the same reason.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Entrepreneurs.Searcher.client">
            <summary>
            It creates a client to be able to use the LocationAPI.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Entrepreneurs.Searcher.SearchByCategory(System.Collections.Generic.IList{Library.HighLevel.Materials.MaterialPublication},Library.HighLevel.Materials.MaterialCategory)">
            <summary>
            This method has the responsibility of searching all the publication's by a category.
            </summary>
            <param name="publications"></param>
            <param name="category"></param>
        </member>
        <member name="M:Library.HighLevel.Entrepreneurs.Searcher.SearchByKeyword(System.Collections.Generic.IList{Library.HighLevel.Materials.MaterialPublication},System.String)">
            <summary>
            This method has the responsibility of searching all the publication's by a keyword.
            </summary>
            <param name="publications"></param>
            <param name="keyword"></param>
        </member>
        <member name="M:Library.HighLevel.Entrepreneurs.Searcher.SearchByLocation(System.Collections.Generic.IList{Library.HighLevel.Materials.MaterialPublication},Ucu.Poo.Locations.Client.Location,System.Double)">
            <summary>
            This method has the responsibility of searching all the publication's by a location.
            </summary>
            <param name="publications"></param>
            <param name="locationSpecified"></param>
            <param name="distanceSpecified"></param>
        </member>
        <member name="T:Library.HighLevel.Materials.AssignedMaterialPublication">
            <summary>
            This struct represents a <see cref="T:Library.HighLevel.Materials.MaterialPublication" /> which is detached from its <see cref="P:Library.HighLevel.Materials.AssignedMaterialPublication.Company" />.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.AssignedMaterialPublication.Publication">
            <summary>
            The publication.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.AssignedMaterialPublication.Company">
            <summary>
            The company which owns the publication.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.AssignedMaterialPublication.#ctor(Library.HighLevel.Materials.MaterialPublication,Library.HighLevel.Companies.Company)">
            <summary>
            Initializes an instance of <see cref="T:Library.HighLevel.Materials.AssignedMaterialPublication" />.
            </summary>
            <param name="publication">The publication.</param>
            <param name="company">The company which owns the publication.</param>
        </member>
        <member name="T:Library.HighLevel.Materials.Habilitation">
            <summary>
            This class represents habilitations entrepreneurs can possess,
            which are necessary to meet certain material manipulation requirements.
            We used the principle Expert and SRP to create this class, it is the 
            class itself that validates the habilitation.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.Habilitation.DocLink">
            <summary>
            A link to a document with the necessary habilitations to manipulate a material.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.Habilitation.IsCorrect">
            <summary>
            A boolean value which evaluates if the habilitation is validated.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.Habilitation.DescriptiveText">
            <summary>
            A text that describes the habilitations that a entrepreneur has.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.Habilitation.#ctor(System.String,System.String)">
            <summary>
            Creates an habilitation.
            </summary>
            <param name="DocLink">It is a link to a document with the necessary habilitations to manipulate a material.</param>
            <param name="descriptiveText">It is a text that describes the habilitations.</param>
        </member>
        <member name="M:Library.HighLevel.Materials.Habilitation.Validate(Library.HighLevel.Materials.Habilitation)">
            <summary>
            Validates the given habilitation.
            </summary>
            <param name="habilitation">The habilitation to validate.</param>
        </member>
        <member name="T:Library.HighLevel.Materials.Material">
            <summary>
            This class represents a type of material which can be sold by companies and purchased by entrepreneurs.
            We used the principle Creator, Material is the class in charge of creating instance of itself.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.Material.Name">
            <summary>
            Gets the material's name.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.Material.Measure">
            <summary>
            Gets the measure with which the amounts of the material are measured.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.Material.Category">
            <summary>
            The category the material belongs to.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.Material.CreateInstance(System.String,Library.HighLevel.Accountability.Measure,Library.HighLevel.Materials.MaterialCategory)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Materials.Material" />, adding it to the collection of materials of its category in the process.
            </summary>
            <param name="name">The material's name.</param>
            <param name="measure">The material's measure.</param>
            <param name="category">The material's category.</param>
            <returns>A <see cref="T:Library.HighLevel.Materials.Material" /> instance.</returns>
        </member>
        <member name="M:Library.HighLevel.Materials.Material.MatchesName(System.String)">
            <summary>
            Checks whether this material has a concrete name.
            </summary>
            <param name="name">The name to compare with.</param>
            <returns>True if the names are equal and false if it not does.</returns>
        </member>
        <member name="T:Library.HighLevel.Materials.MaterialCategory">
            <summary>
            This class represents a category of materials, through which they can be easily classified.
            Created because of SRP and LSP, the category can be used by any class without problems.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialCategory.Name">
            <summary>
            The category's name.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialCategory.Categories">
            <summary>
            The list of existent categories.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialCategory.materials">
            <summary>
            The list of materials which belong to this category.
            The class <see cref="T:System.Collections.Generic.List`1" /> is used instead of the interface <see cref="T:System.Collections.Generic.IList`1" />
            because the method <see cref="M:System.Collections.Generic.List`1.AsReadOnly" /> is neccesary for the property <see cref="P:Library.HighLevel.Materials.MaterialCategory.Materials" />.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialCategory.Materials">
            <summary>
            A public, read-only list of materials which belong to this category.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialCategory.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Library.HighLevel.Materials.MaterialCategory" /> class.
            </summary>
            <param name="name">The material´s category name.</param>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialCategory.GetByName(System.String)">
            <summary>
            Gets a concrete <see cref="T:Library.HighLevel.Materials.MaterialCategory" /> given its name.
            </summary>
            <param name="name">The category's name.</param>
            <returns>An instance of <see cref="T:Library.HighLevel.Materials.MaterialCategory" />.</returns>
        </member>
        <member name="T:Library.HighLevel.Materials.MaterialPublication">
            <summary>
            This class represents a publication of a material from a company.
            We created this using Creator, because it creates instance of material
            publication in it's own class.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.Material">
            <summary>
            Gets the publication's material.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.Amount">
            <summary>
            Gets the publication's amount of material.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.Price">
            <summary>
            Gets the publication's price of the material.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.PickupLocation">
            <summary>
            Gets the publication's pick-up location of material.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.Type">
            <summary>
            Gets the type of the material publication.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialPublication.Keywords">
            <summary>
            The list of keywords of the publication material.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialPublication.CheckMaterialFields(Library.HighLevel.Materials.Material,Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price)">
            <summary>
            Checks whether the given fields for building a <see cref="T:Library.HighLevel.Materials.MaterialPublication" /> are valid with each other.
            That is, whether the material, amount and price are described under the same measure.
            </summary>
            <param name="material">The material.</param>
            <param name="amount">The amount of material.</param>
            <param name="price">The price of the material.</param>
            <returns>Whether the data is valid with itself.</returns>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialPublication.CreateInstance(Library.HighLevel.Materials.Material,Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price,Ucu.Poo.Locations.Client.Location,Library.HighLevel.Materials.MaterialPublicationTypeData,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Materials.MaterialPublication" />, validating the data beforehand.
            </summary>
            <param name="material">The material.</param>
            <param name="amount">The amount of material.</param>
            <param name="price">The price of the material.</param>
            <param name="pickupLocation">The pick-up location of the material.</param>
            <param name="type">The type of the material publication.</param>
            <param name="keywords">The keywords of the material.</param>
            <returns>A <see cref="T:Library.HighLevel.Materials.MaterialPublication" />, or null if the data is invalid.</returns>
        </member>
        <member name="T:Library.HighLevel.Materials.MaterialPublicationTypeData">
            <summary>
            This struct represents the three possible states in which a <see cref="T:Library.HighLevel.Materials.MaterialPublication" /> can be.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublicationTypeData.DateTime">
            <summary>
            The date the material will be published if the publication is scheduled.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialPublicationTypeData.PublicationType">
            <summary>
            The type of the publication.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Materials.MaterialPublicationTypeData.MaterialPublicationType">
            <summary>
            This enum represents the three possible states in which a <see cref="T:Library.HighLevel.Materials.MaterialPublication" /> can be.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialPublicationTypeData.MaterialPublicationType.NORMAL">
            <summary>
            Represents a normal material publication.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialPublicationTypeData.MaterialPublicationType.SCHEDULED">
            <summary>
            Represents a material publication which has a specific schedule.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialPublicationTypeData.MaterialPublicationType.CONTINUOUS">
            <summary>
            Represents a material publication whose material is constantly generated.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialPublicationTypeData.Normal">
            <summary>
            Creates the <see cref="T:Library.HighLevel.Materials.MaterialPublicationTypeData" /> for a normal <see cref="T:Library.HighLevel.Materials.MaterialPublication" />.
            </summary>
            <returns>The <see cref="T:Library.HighLevel.Materials.MaterialPublicationTypeData" />.</returns>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialPublicationTypeData.Scheduled(System.DateTime)">
            <summary>
            Creates the <see cref="T:Library.HighLevel.Materials.MaterialPublicationTypeData" /> for a scheduled <see cref="T:Library.HighLevel.Materials.MaterialPublication" />.
            </summary>
            <param name="dateTime">The <see cref="P:Library.HighLevel.Materials.MaterialPublicationTypeData.DateTime" /> in which the material will be published.</param>
            <returns>The <see cref="T:Library.HighLevel.Materials.MaterialPublicationTypeData" />.</returns>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialPublicationTypeData.Continuous">
            <summary>
            Creates the <see cref="T:Library.HighLevel.Materials.MaterialPublicationTypeData" /> for a continuous <see cref="T:Library.HighLevel.Materials.MaterialPublication" />.
            </summary>
            <returns>The <see cref="T:Library.HighLevel.Materials.MaterialPublicationTypeData" />.</returns>
        </member>
        <member name="T:Library.HighLevel.Materials.Requirement">
            <summary>
            This class represents a requirement to manipulate certain materials.
            We used Expert to create this class, the class is the one in charge of
            checking if the habilitation's are satisfied. We also used SRP, that's why
            we separated requirement from habilitation.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.Requirement.FullCheck(System.Collections.Generic.IEnumerable{Library.HighLevel.Materials.Requirement},System.Collections.Generic.IEnumerable{Library.HighLevel.Materials.Habilitation})">
            <summary>
            Checks if all the given requirements are satisfied by the given habilitations.
            </summary>
            <param name="requirements">The requirements to check.</param>
            <param name="habilitations">The habilitations to compare with.</param>
            <returns>Whether all the given requirements are satisfied by the given habilitations.</returns>
        </member>
        <member name="M:Library.HighLevel.Materials.Requirement.IsSatisfiedBy(Library.HighLevel.Materials.Habilitation)">
            <summary>
            Checks if the requirement is satisfied by a concrete <see cref="T:Library.HighLevel.Materials.Habilitation" />.
            </summary>
            <param name="habilitation">The habilitation.</param>
            <returns>Whether the requirement is satisfied by the habilitation.</returns>
        </member>
        <member name="T:Library.InputHandlers.Abstractions.PipeProcessor`1">
            <summary>
            This class represents an input processor which takes the result of another one and applies a transformation to it.
            </summary>
            <typeparam name="T">The type of the resulting object.</typeparam>
        </member>
        <member name="M:Library.InputHandlers.Abstractions.PipeProcessor`1.Library#Core#Processing#IInputHandler#ProcessInput(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Library.InputHandlers.Abstractions.PipeProcessor`1.CreateInstance``1(System.Func{``0,Library.Result{`0,System.String}},Library.Core.Processing.IInputProcessor{``0})">
            <summary>
            Creates a pipe processor.
            </summary>
            <param name="func">The transformation function.</param>
            <param name="processor">The inner <see cref="T:Library.Core.Processing.IInputProcessor`1" />.</param>
            <typeparam name="U">The type of the objects the inner <see cref="T:Library.Core.Processing.IInputProcessor`1" /> returns.</typeparam>
        </member>
        <member name="T:Library.InputHandlers.Abstractions.ProcessorWrapper`1">
            <summary>
            Act as a type wrapper for a specific type of <see cref="T:Library.Core.Processing.IInputProcessor`1" />.
            </summary>
            <typeparam name="T">The type the inner processor returns.</typeparam>
        </member>
        <member name="M:Library.InputHandlers.Abstractions.ProcessorWrapper`1.#ctor(Library.Core.Processing.IInputProcessor{`0})">
            <summary>
            Initializes an instance of <see cref="T:Library.InputHandlers.Abstractions.ProcessorWrapper`1" />.
            </summary>
            <param name="innerProcessor">The processor which receives the data and returns the object.</param>
        </member>
        <member name="T:Library.InputHandlers.BasicStringProcessor">
            <summary>
            Generates a string from a single input message, after trimming it.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.BasicStringProcessor.#ctor(System.Func{System.String})">
            <summary>
            Initializes an instance of <see cref="T:Library.InputHandlers.BasicStringProcessor" /> with the given default response getter.
            </summary>
            <param name="initialResponseGetter">The default response getter.</param>
        </member>
        <member name="T:Library.InputHandlers.EmailProcessor">
            <summary>
            Represents a processor which parses an email from input.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.EmailProcessor.#ctor(System.Func{System.String})">
            <summary>
            Initializes an instance of <see cref="T:Library.InputHandlers.EmailProcessor" />.
            </summary>
            <param name="initialResponseGetter">The function which determines the default response of the processor.</param>
        </member>
        <member name="T:Library.InputHandlers.HabilitationProcessor">
            <summary>
            This class represents a processor which generates habilitations.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.HabilitationProcessor.#ctor(System.Func{System.String})">
            <summary>
            Initializes an instance of <see cref="T:Library.InputHandlers.HabilitationProcessor" />.
            </summary>
            <param name="initialResponseGetter">The function which determines the default response of the processor.</param>
        </member>
        <member name="M:Library.InputHandlers.HabilitationProcessor.getResult">
            <inheritdoc />
        </member>
        <member name="T:Library.InputHandlers.HTMLLinkProcessor">
            <summary>
            This class represents a processor which generates a hypertext link.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.HTMLLinkProcessor.#ctor(System.Func{System.String})">
            <summary>
            Initializes an instance of <see cref="T:Library.InputHandlers.HTMLLinkProcessor" />.
            </summary>
            <param name="initialResponseGetter">The function which determines the default response of the processor.</param>
        </member>
        <member name="T:Library.InputHandlers.ListProcessor`1">
            <summary>
            This class represents a processor which processes several objects of the same type.
            </summary>
            <typeparam name="T">The type of the elements which are processed into a list.</typeparam>
        </member>
        <member name="M:Library.InputHandlers.ListProcessor`1.#ctor(Library.Core.Processing.IInputProcessor{`0},System.Func{System.String,System.Boolean},System.Func{System.String})">
            
        </member>
        <member name="M:Library.InputHandlers.ListProcessor`1.GetDefaultResponse">
            <inheritdoc />
        </member>
        <member name="T:Library.InputHandlers.LocationProcessor">
            <summary>
            Represents a processor which generates a location from input.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.LocationProcessor.#ctor(System.Func{System.String})">
            
        </member>
        <member name="T:Library.InputHandlers.PhoneNumberProcessor">
            <summary>
            Represent an input processor which processes a phone number from input.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.PhoneNumberProcessor.#ctor(System.Func{System.String})">
            
        </member>
        <member name="T:Library.InputHandlers.ProcessorHandler">
            <summary>
            Represents an <see cref="T:Library.Core.Processing.IInputHandler" /> which uses an input processor, and a function to be given its result.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.ProcessorHandler.#ctor(System.Func{System.String,Library.Result{System.Boolean,System.String}},System.Func{System.String},System.Action)">
            
        </member>
        <member name="M:Library.InputHandlers.ProcessorHandler.CreateInstance``1(System.Action{``0},Library.Core.Processing.IInputProcessor{``0})">
            <summary>
            Creates an instance of <see cref="T:Library.InputHandlers.ProcessorHandler" />.
            </summary>
            <param name="action">The operation to do with the resulting input.</param>
            <param name="processor">The input processor.</param>
            <typeparam name="T">The type of the object the input processor returns, which is used by the "action" operation.</typeparam>
        </member>
        <member name="T:Library.InputHandlers.UnsignedInt32Processor">
            <summary>
            Represent an input processor which processes an integer from input.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.UnsignedInt32Processor.#ctor(System.Func{System.String})">
            
        </member>
        <member name="T:Library.NotNull`1">
            <summary>
            This class represents a not nullable value.
            </summary>
        </member>
        <member name="P:Library.NotNull`1.Value">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Library.NotNull`1.FromOption(Library.Option{`0})">
            <summary>
            Converts an <see cref="T:Library.Option`1" /> with a value into an <see cref="T:Library.Option`1" /> with a <see cref="T:Library.NotNull`1" /> with the same value.
            </summary>
            <param name="option">The initial <see cref="T:Library.Option`1" />.</param>
            <returns>The resulting <see cref="T:Library.Option`1" />.</returns>
        </member>
        <member name="M:Library.NotNull`1.op_Implicit(Library.NotNull{`0})~`0">
            <summary>
            Gets the value out of the <see cref="T:Library.NotNull`1" />.
            </summary>
            <param name="notNull">The <see cref="T:Library.NotNull`1" />.</param>
        </member>
        <member name="T:Library.Option`1">
            <summary>
            This class represents a nullable value.
            </summary>
            <typeparam name="T">The type contained in the option.</typeparam>
        </member>
        <member name="P:Library.Option`1.HasValue">
            <summary>
            Whether there is a value.
            </summary>
        </member>
        <member name="P:Library.Option`1.None">
            <summary>
            An empty <see cref="T:Library.Option`1" />.
            </summary>
        </member>
        <member name="M:Library.Option`1.From(`0)">
            <summary>
            Returns an <see cref="T:Library.Option`1" /> with the given value, <br />
            or an empty one if the value's null.
            </summary>
            <param name="value">The given value.</param>
        </member>
        <member name="M:Library.Option`1.Map``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Returns the result of a function which receives the given value if there is, <br />,
            or the result of a function which doesn't receive anything if there isn't.
            </summary>
            <param name="someFunc">The function for the success value.</param>
            <param name="noneFunc">The function for when there's no value.</param>
            <typeparam name="U">The type returned by the functions.</typeparam>
        </member>
        <member name="M:Library.Option`1.Unwrap">
            <summary>
            Attempts to retrieve the value from this <see cref="T:Library.Option`1" />, throwing an error if not possible.
            </summary>
            <exception cref="T:System.ArgumentNullException">This option doesn't have a value.</exception>
            <returns>The option's inner value.</returns>
        </member>
        <member name="M:Library.Option`1.MapValue``1(System.Func{`0,``0})">
            <summary>
            Passes the inner value through a function (if there is), and returns the result in a new <see cref="T:Library.Option`1" />.
            </summary>
            <param name="someFunc">The function for the value.</param>
            <typeparam name="U">The type returned by the function.</typeparam>
        </member>
        <member name="T:Library.Platforms.Telegram.Secret">
            <summary>
            This class stores secret data whose access has to be carefully managed.
            </summary>
        </member>
        <member name="F:Library.Platforms.Telegram.Secret.TELEGRAM_BOT_TOKEN">
            <summary>
            The bot's secret token.
            </summary>
        </member>
        <member name="T:Library.Platforms.Telegram.TelegramBot">
            <summary>
            This class represents the program's telegram bot.
            </summary>
        </member>
        <member name="M:Library.Platforms.Telegram.TelegramBot.GetUserId(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Library.Platforms.Telegram.TelegramBot.SendMessage(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="F:Library.Platforms.Telegram.TelegramBot.Client">
            <summary>
            The <see cref="T:Telegram.Bot.ITelegramBotClient" /> which is used to send and receive messages.
            </summary>
        </member>
        <member name="P:Library.Platforms.Telegram.TelegramBot.BotId">
            <summary>
            The bot's Telegram id.
            </summary>
        </member>
        <member name="P:Library.Platforms.Telegram.TelegramBot.BotName">
            <summary>
            The bot's Telegram name.
            </summary>
        </member>
        <member name="F:Library.Platforms.Telegram.TelegramBot.Instance">
            <summary>
            The <see cref="T:Library.Platforms.Telegram.TelegramBot" /> class' single instance.
            </summary>
        </member>
        <member name="M:Library.Platforms.Telegram.TelegramBot.ReceiveMessages(System.Action)">
            <summary>
            Starts receiving messages until a certain function (which blocks the thread) returns.
            </summary>
            <param name="blockingAction">The function which blocks the thread.</param>
        </member>
        <member name="T:Library.Result`2">
            <summary>
            This struct represents a value which could be a success (with a success value) or an error (with an error value).
            </summary>
            <typeparam name="T">The type of success value.</typeparam>
            <typeparam name="E">The type of error value.</typeparam>
        </member>
        <member name="P:Library.Result`2.Success">
            <summary>
            Whether the value is a success or not.
            </summary>
        </member>
        <member name="M:Library.Result`2.Ok(`0)">
            <summary>
            Creates an instance of <see cref="T:Library.Result`2"/> which represents a success.
            </summary>
            <param name="successValue">The success value.</param>
            <returns>An instance of <see cref="T:Library.Result`2"/></returns>
        </member>
        <member name="M:Library.Result`2.Err(`1)">
            <summary>
            Creates an instance of <see cref="T:Library.Result`2"/> which represents an error.
            </summary>
            <param name="errorValue">The error value.</param>
            <returns>An instance of <see cref="T:Library.Result`2"/></returns>
        </member>
        <member name="M:Library.Result`2.Map``1(System.Func{`0,``0},System.Func{`1,``0})">
            <summary>
            Passes either the success value or the error value through a function, returning the result.
            </summary>
            <param name="successFunc">The function for the success value.</param>
            <param name="errFunc">The function for the error value.</param>
            <typeparam name="U">The type returned by the functions.</typeparam>
        </member>
        <member name="M:Library.Result`2.Switch``2(System.Func{`0,``0},System.Func{`1,``1})">
            <summary>
            Passes either the success value or the error value through a function, and returns the result in a new instance of <see cref="T:Library.Result`2" />.
            </summary>
            <param name="successFunc">The function for the success value.</param>
            <param name="errFunc">The function for the error value.</param>
            <typeparam name="U">The type returned by the success function.</typeparam>
            <typeparam name="F">The type returned by the error function.</typeparam>
        </member>
        <member name="M:Library.Result`2.SwitchOk``1(System.Func{`0,``0})">
            <summary>
            Passes the success value through a function if there is, returning a new <see cref="T:Library.Result`2" /> with it.
            </summary>
            <param name="successFunc">The function for the success value.</param>
            <typeparam name="U">The type of the new success value.</typeparam>
        </member>
        <member name="M:Library.Result`2.SwitchErr``1(System.Func{`1,``0})">
            <summary>
            Passes the error value through a function if there is, returning a new <see cref="T:Library.Result`2" /> with it.
            </summary>
            <param name="errFunc">The function for the error value.</param>
            <typeparam name="F">The type of the new error value.</typeparam>
        </member>
        <member name="M:Library.Result`2.AndThen``1(System.Func{`0,Library.Result{``0,`1}})">
            <summary>
            If the result is a success, returns the result of the given function.
            If it's an error, returns that error.
            </summary>
            <param name="successFunc">The function for the success value.</param>
            <typeparam name="U">The success type of the result returned by the function.</typeparam>
        </member>
        <member name="T:Library.Singleton`1">
            <summary>
            This class represents classes which are supposed to have only one instance.
            </summary>
            <typeparam name="T">The class which has only one instance.</typeparam>
        </member>
        <member name="F:Library.Singleton`1.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="T:Library.States.Companies.IncompleteCompanyRepresentativeState">
            <summary>
            This class represents the state of a company representative who is yet to be fully logged in to the platform.
            </summary>
        </member>
        <member name="M:Library.States.Companies.IncompleteCompanyRepresentativeState.ProcessMessage(System.String,Library.Core.UserData,System.String)">
            <inheritdoc />
        </member>
        <member name="P:Library.States.Companies.IncompleteCompanyRepresentativeState.IsComplete">
            <inheritdoc />
        </member>
        <member name="M:Library.States.Companies.IncompleteCompanyRepresentativeState.GetDefaultResponse">
            <inheritdoc />
        </member>
        <member name="T:Library.States.Entrepreneurs.NewEntrepreneurState">
            <summary>
            
            </summary>
        </member>
        <member name="M:Library.States.Entrepreneurs.NewEntrepreneurState.#ctor(System.String)">
            
        </member>
        <member name="P:Library.States.Entrepreneurs.NewEntrepreneurState.IsComplete">
            <inheritdoc />
        </member>
        <member name="T:Library.States.InputHandlerState">
            <summary>
            This class represents a State which basically works with an <see cref="T:Library.Core.Processing.IInputHandler" />.
            </summary>
        </member>
        <member name="M:Library.States.InputHandlerState.#ctor(Library.Core.Processing.IInputHandler,System.Func{Library.Core.State},System.Func{Library.Core.State})">
            
        </member>
        <member name="M:Library.States.InputHandlerState.ProcessMessage(System.String,Library.Core.UserData,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Library.States.InputHandlerState.GetDefaultResponse">
            <inheritdoc />
        </member>
        <member name="T:Library.States.MultipleOptionState">
            <summary>
            This class represents a <see cref="T:Library.Core.State" /> which handles the messages in a multiple-option fashion.
            </summary>
        </member>
        <member name="M:Library.States.MultipleOptionState.GetErrorString">
            <summary>
            Gets the string to send in order to notify the user that the data is invalid.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Library.States.MultipleOptionState.GetEndString">
            <summary>
            Gets the string to send after receiving a valid option.
            </summary>
            <returns>A string, or null if there's no string to send.</returns>
        </member>
        <member name="M:Library.States.MultipleOptionState.#ctor(System.ValueTuple{System.String,System.Func{Library.Core.State}}[])">
            <summary>
            Creates a <see cref="T:Library.States.MultipleOptionState" /> with a given group of commands.
            </summary>
            <param name="commands">The group of commands.</param>
        </member>
        <member name="M:Library.States.MultipleOptionState.ProcessMessage(System.String,Library.Core.UserData,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Library.Utils.BasicUtils">
            <summary>
            This class stores context-generic static methods.
            </summary>
        </member>
        <member name="M:Library.Utils.BasicUtils.GetLocation(System.String,System.String,System.String,System.String)">
            <summary>
            This method returns the coordinates of a specific address using the LocationAPI.
            </summary>
            <param name="address">The site address.</param>
            <param name="city">The city where is the site.</param>
            <param name="department">The department where is the site.</param>
            <param name="country">The country where is the site.</param>
            <returns>The site´s coordinates.</returns>
        </member>
        <member name="M:Library.Utils.BasicUtils.AreSimilar(System.String,System.String)">
            <summary>
            This method returns True if both strings are equals.
            </summary>
            <param name="s1">String to compare.</param>
            <param name="s2">Other String to compare.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:Library.Utils.BasicUtils.IsValidEmail(System.String)">
            <summary>
            This method check if a email is valid.
            </summary>
            <param name="s">The email to check.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:Library.Utils.BasicUtils.IsValidPhoneNumber(System.Int32)">
            <summary>
            This method checks if a phone number is valid.
            </summary>
            <param name="number">The phone number input.</param>
            <returns>True if the number is valid and false if it not does.</returns>
        </member>
        <member name="M:Library.Utils.BasicUtils.IsValidHyperTextLink(System.String)">
            <summary>
            Checks if a string is a valid hypertext link.
            </summary>
            <param name="link">The string.</param>
            <returns>Whether it's a valid link or not.</returns>
        </member>
        <member name="T:Library.Utils.MoneyQuantityUtils">
            <summary>
            This class offers functions associated with the <see cref="T:Library.HighLevel.Accountability.MoneyQuantity" /> struct.
            We created this class because of the Polymorphism pattern, while money quantity is for
            an amount of money, this class is created for a particular sale, so we separated it by
            destination.
            </summary>
        </member>
        <member name="M:Library.Utils.MoneyQuantityUtils.Calculate(Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price)">
            <summary>
            Calculates the amount of money made from selling a certain amount of material at a certain price.
            </summary>
            <param name="amount">The amount of material.</param>
            <param name="price">The price of the material.</param>
            <returns>The resulting <see cref="T:Library.HighLevel.Accountability.MoneyQuantity" />, or null if the amount and price are invalid with each other.</returns>
        </member>
        <member name="T:Library.Utils.OptionUtils">
            <summary>
            This class holds methods which are related with the <see cref="T:Library.Option`1"/> struct.
            </summary>
        </member>
        <member name="M:Library.Utils.OptionUtils.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:Library.Option`1" /> containing the first value of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, if there is.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <typeparam name="T">The type of the elements of the enumerable.</typeparam>
            <returns>
            Option.None if the enumerable is empty or if the first element is null, or<br />
            Option.Some(element), being element the first element.
            </returns>
        </member>
    </members>
</doc>
