using System;
using Library.Core.Processing;

namespace Library.InputHandlers.Abstractions
{
    /// <summary>
    /// Represents an <see cref="InputProcessor{T}" /> which transforms a value into another of the same type
    /// via a processor.
    /// </summary>
    /// <typeparam name="T">The type of the value the object transforms.</typeparam>
    /// <typeparam name="U">The type of the data generated by a processor.</typeparam>
    public class ProcessorModifier<T, U> : InputProcessor<T>
    {
        private Func<T> initialValueGetter;
        private Func<T, U, Result<T, string>> func;
        private InputProcessor<U> processor;
        private T result;

        /// <summary>
        /// Initializes an instance of <see cref="ProcessorModifier{T, U}" />.
        /// </summary>
        /// <param name="initialValueGetter">The function which returns the initial value.</param>
        /// <param name="func">The function which takes the initial value and the generated data, and returns the resulting value.</param>
        /// <param name="processor">The processor which generates the data.</param>
        public ProcessorModifier(Func<T> initialValueGetter, Func<T, U, Result<T, string>> func, InputProcessor<U> processor)
        {
            this.initialValueGetter = initialValueGetter;
            this.result = initialValueGetter();
            this.func = func;
            this.processor = processor;
        }

        /// <summary>
        /// Generates a function which can be passed to the <see cref="BaseFormProcessor{T, U}" /> constructor to represent an <see cref="InputHandler" />.
        /// </summary>
        /// <param name="func">The function which takes the initial value and the generated data, and returns the resulting value.</param>
        /// <param name="processor">The processor which generates the data.</param>
        /// <returns>A function which receives a value getter and returns a <see cref="ProcessorModifier{T, U}" />.</returns>
        public static Func<Func<T>, ProcessorModifier<T, U>> CreateInstanceGetter(Func<T, U, Result<T, string>> func, InputProcessor<U> processor) =>
            initialValueGetter => new ProcessorModifier<T, U>(initialValueGetter, func, processor);

        /// <summary>
        /// Generates a function which can be passed to the <see cref="BaseFormProcessor{T, U}" /> constructor to represent an <see cref="InputHandler" />.
        /// </summary>
        /// <param name="func">The function which takes the initial value and the generated data, and returns the resulting value.</param>
        /// <param name="processor">The processor which generates the data.</param>
        /// <returns>A function which receives a value getter and returns a <see cref="ProcessorModifier{T, U}" />.</returns>
        public static Func<Func<T>, ProcessorModifier<T, U>> CreateInfallibleInstanceGetter(Func<T, U, T> func, InputProcessor<U> processor) =>
            ProcessorModifier<T, U>.CreateInstanceGetter((init, v) => Result<T, string>.Ok(func(init, v)), processor);

        /// <inheritdoc />
        public override string GetDefaultResponse() => this.processor.GetDefaultResponse();

        /// <inheritdoc />
        public override Result<bool, string> ProcessInput(string msg) =>
            processor.GenerateFromInput(msg) is Result<U, string> middleResult
                ? middleResult.AndThen(
                    v =>
                    {
                        Result<T, string> res = (this.func)((this.initialValueGetter)(), v);
                        res.RunIfErr(e =>
                        {
                            processor.Reset();
                        });
                        return res;
                    }
                ).Map(
                    value =>
                    {
                        this.result = value;
                        return Result<bool, string>.Ok(true);
                    },
                    s => Result<bool, string>.Err(s)
                ) : Result<bool, string>.Ok(false);

        /// <inheritdoc />
        protected override Result<T, string> getResult() => Result<T, string>.Ok(this.result);

        /// <inheritdoc />
        public override void Reset()
        {
            this.processor.Reset();
        }
    }
}
