<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Core.ContactInfo">
            <summary>
            This class represent contact information data associated with a user,
            a company, or another entity with contact information.
            </summary>
        </member>
        <member name="F:Library.Core.ContactInfo.Email">
            <summary>
            The entity's email (null if non-existent).
            </summary>
        </member>
        <member name="F:Library.Core.ContactInfo.PhoneNumber">
            <summary>
            The entity's phone number (-1 if non-existent).
            </summary>
        </member>
        <member name="T:Library.Core.Distribution.MessageManager">
            <summary>
            This class represents the highest level of encapsulation in message processing.
            </summary>
        </member>
        <member name="M:Library.Core.Distribution.MessageManager.ProcessMessage(Library.Core.Message)">
            <summary>
            Processes a received message, returning the text of the response message.
            </summary>
            <param name="msg">The received message.</param>
            <returns>The response message's text.</returns>
        </member>
        <member name="T:Library.Core.Distribution.SessionManager">
            <summary>
            This class handles the creation and selection of user sessions.
            </summary>
        </member>
        <member name="F:Library.Core.Distribution.SessionManager.sessions">
            <summary>
            The list of current sessions.
            </summary>
        </member>
        <member name="M:Library.Core.Distribution.SessionManager.GetById(Library.Core.UserId)">
            <summary>
            Returns the <see cref="T:Library.Core.Distribution.UserSession" /> whose id equals to the given one.
            </summary>
            <param name="id">The given id.</param>
            <returns>Its corresponding <see cref="T:Library.Core.Distribution.UserSession" />, or null if there isn't.</returns>
        </member>
        <member name="M:Library.Core.Distribution.SessionManager.NewUser(Library.Core.UserId,Library.Core.UserData,Library.Core.State)">
            <summary>
            Adds a new user into the platform.
            </summary>
            <param name="id">The user's id.</param>
            <param name="userData">The user's data.</param>
            <param name="state">The user's initial state.</param>
            <returns>The resulting <see cref="T:Library.Core.Distribution.UserSession" />, or null if there's already one.</returns>
        </member>
        <member name="T:Library.Core.Distribution.UserSession">
            <summary>
            This class represent a user's session, being the highest-level class which represents it.
            </summary>
        </member>
        <member name="F:Library.Core.Distribution.UserSession.Id">
            <summary>
            The id of the user.
            </summary>
        </member>
        <member name="F:Library.Core.Distribution.UserSession.userData">
            <summary>
            Data associated with the user.
            </summary>
        </member>
        <member name="F:Library.Core.Distribution.UserSession.state">
            <summary>
            The current state of the user's session.
            </summary>
        </member>
        <member name="M:Library.Core.Distribution.UserSession.#ctor(Library.Core.UserId,Library.Core.UserData,Library.Core.State)">
            <summary>
            Creates a UserSession.
            </summary>
            <param name="id">The session's user's id.</param>
            <param name="userData">The session's user's data.</param>
            <param name="state">The session's initial state.</param>
        </member>
        <member name="M:Library.Core.Distribution.UserSession.ProcessMessage(System.String)">
            <summary>
            Process the received message text, returning the response message text.
            </summary>
            <param name="msg">The received message text.</param>
            <returns>The response message text.</returns>
        </member>
        <member name="T:Library.Core.Invitations.Invitation">
            <summary>
            This class represents invitations, through which admins can invite other non-registered users into the platform.
            </summary>
        </member>
        <member name="P:Library.Core.Invitations.Invitation.Code">
            <summary>
            The invitation's code.
            </summary>
        </member>
        <member name="M:Library.Core.Invitations.Invitation.#ctor(System.String)">
            
        </member>
        <member name="M:Library.Core.Invitations.Invitation.Validate(Library.Core.UserId)">
            <summary>
            Validates the invitation, returning the response string for that activity.
            </summary>
            <param name="userId">The id of the user who validated the invitation.</param>
            <returns>The response string.</returns>
        </member>
        <member name="T:Library.Core.Invitations.InvitationManager">
            <summary>
            This class acts as the highest level of abstraccion in invitation handling.
            </summary>
        </member>
        <member name="M:Library.Core.Invitations.InvitationManager.CreateInvitation(System.String,System.Func{System.String,Library.Core.Invitations.Invitation})">
            <summary>
            Creates an invitation.
            </summary>
            <param name="invitationCode">The invitation's code.</param>
            <param name="f">A function which creates the invitation taking the code.</param>
        </member>
        <member name="M:Library.Core.Invitations.InvitationManager.ValidateInvitation(System.String,Library.Core.UserId)">
            <summary>
            Validates an invitation with a user id, returning the response message of the validation.
            </summary>
            <param name="invitationCode">The invitation's code.</param>
            <param name="userId">The id of the user who validated the invitation.</param>
            <returns>The response message of the validation of the invitation, or an error message if there wasn't.</returns>
        </member>
        <member name="T:Library.Core.Message">
            <summary>
            Represents a message (either received from a messaging platform or sent to one)
            </summary>
        </member>
        <member name="F:Library.Core.Message.Text">
            <summary>
            The content of the image.
            </summary>
        </member>
        <member name="F:Library.Core.Message.Id">
            <summary>
            The id of the user who sent the image.
            </summary>
        </member>
        <member name="M:Library.Core.Message.#ctor(System.String,Library.Core.UserId)">
            <summary>
            Creates a message.
            </summary>
            <param name="text">The message's text.</param>
            <param name="id">The message's id.</param>
        </member>
        <member name="T:Library.Core.Messaging.IMessageReceiver`1">
            <summary>
            This interface represents a platform from which the program can receive messages.
            </summary>
            <typeparam name="TId">The type of the ids the platform uses to identify its users.</typeparam>
        </member>
        <member name="M:Library.Core.Messaging.IMessageReceiver`1.GetUserId(`0)">
            <summary>
            Converts a valid id of the platform into a <see cref="T:Library.Core.UserId" />.
            </summary>
            <param name="id">The id to convert.</param>
            <returns>The resulting <see cref="T:Library.Core.UserId" />.</returns>
        </member>
        <member name="M:Library.Core.Messaging.IMessageReceiver`1.ReceiveMessage(System.String,`0)">
            <summary>
            Handles the event of receiving a message.
            </summary>
            <param name="msg">The message's text.</param>
            <param name="id">The message's id.</param>
        </member>
        <member name="T:Library.Core.Messaging.IMessageSender`1">
            <summary>
            This interface represents a platform from which the program can send messages.
            </summary>
            <typeparam name="TId">The type of the ids the platform uses to identify its users.</typeparam>
        </member>
        <member name="M:Library.Core.Messaging.IMessageSender`1.SendMessage(System.String,`0)">
            <summary>
            Sends a message.
            </summary>
            <param name="msg">The message's text.</param>
            <param name="id">The message's id.</param>
        </member>
        <member name="T:Library.Core.Messaging.MessagingPlatform`1">
            <summary>
            This class represents a platform from which the program can send and receive messages.
            </summary>
            <typeparam name="TId">The type of the ids the platform uses to identify its users.</typeparam>
        </member>
        <member name="M:Library.Core.Messaging.MessagingPlatform`1.SendMessage(System.String,`0)">
            <inheritdoc />
        </member>
        <member name="M:Library.Core.Messaging.MessagingPlatform`1.GetUserId(`0)">
            <inheritdoc />
        </member>
        <member name="M:Library.Core.Messaging.MessagingPlatform`1.ReceiveMessage(System.String,`0)">
            <summary>
            Handles the event of receiving a message, sending a response.
            </summary>
            <param name="msg">The received message's text.</param>
            <param name="id">The received message's user id.</param>
        </member>
        <member name="T:Library.Core.Processing.FormProcessor`1">
            <summary>
            Represent a complex form-like set of data through which certain forms of data can be received from user input easily.
            </summary>
        </member>
        <member name="F:Library.Core.Processing.FormProcessor`1.inputHandlers">
            <summary>
            The list of input handlers.
            </summary>
        </member>
        <member name="M:Library.Core.Processing.FormProcessor`1.GetDefaultResponse">
            <summary>
            Represents the functionality of handling one or more message input until realizing a certain operation successfully,
            or until the user indicates to stop trying.
            </summary>
        </member>
        <member name="M:Library.Core.Processing.FormProcessor`1.getResult">
            <summary>
            Generates the resulting object with the obtained input.
            </summary>
            <returns>The resulting object.</returns>
        </member>
        <member name="M:Library.Core.Processing.FormProcessor`1.Library#Core#Processing#IInputProcessor{T}#getInput(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Library.Core.Processing.IInputHandler">
            <summary>
            Represents the functionality of handling one or more message input until realizing a certain operation successfully,
            or until the user indicates to stop trying.
            </summary>
        </member>
        <member name="M:Library.Core.Processing.IInputHandler.GetInput(System.String)">
            <summary>
            Handles a received input message, returning a success signal,
            a response string (indicating it's not done yet), or an interrupt signal.
            </summary>
            <param name="msg">The input message.</param>
            <returns>
            (..., response), being response a response string, <br />
            (true, null) for a success signal, or <br />
            (false, null) for an interrupt signal.
            </returns>
        </member>
        <member name="M:Library.Core.Processing.IInputHandler.GetDefaultResponse">
            <summary>
            Returns the first message the object uses to indicate what kind of input it wants.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Library.Core.Processing.IInputHandler.Reset">
            <summary>
            Resets the processor, so it can be used again.
            </summary>
        </member>
        <member name="T:Library.Core.Processing.IInputProcessor`1">
            <summary>
            Represents the functionality of receiving one or more input messages, and generating an object with that input.
            </summary>
            <typeparam name="T">The type of the resulting object.</typeparam>
        </member>
        <member name="M:Library.Core.Processing.IInputProcessor`1.Reset">
            <summary>
            Resets the processor, so it can be used again.
            </summary>
        </member>
        <member name="M:Library.Core.Processing.IInputProcessor`1.GetDefaultResponse">
            <summary>
            Returns the first message the object uses to indicate what kind of input it wants.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Library.Core.Processing.IInputProcessor`1.getInput(System.String)">
            <summary>
            Handles a received input message, <br />
            returning a response string if it's not ready yet, <br />
            a ready-to-process-signal if it is, or <br />
            an interrupt signal if the user wants to interrupt the process.
            </summary>
            <remarks>
            After the function returns (true, null) once,
            it's recommended that it does nothing and always returns (true, null) on subsequent calls.
            </remarks>
            <param name="msg">The input message.</param>
            <returns>
            (..., response), being response a response string, <br />
            (true, null) for a ready-to-process signal, or <br />
            (false, null) for an interrupt signal.
            </returns>
        </member>
        <member name="M:Library.Core.Processing.IInputProcessor`1.getResult">
            <summary>
            Generates the resulting object with the obtained input.
            </summary>
            <remarks>
            This function should be called only after a call to <see cref="M:Library.Core.Processing.IInputProcessor`1.getInput(System.String)" /> returns (true, null),
            which is a signal that the object's ready to produce the result.
            </remarks>
            <returns>
            (result, null), being result the resulting object, or<br />
            (null, error), being error an error string.
            </returns>
        </member>
        <member name="M:Library.Core.Processing.IInputProcessor`1.ProcessInput(System.String)">
            <summary>
            Receives an input message, returning the resulting object if it's ready.
            </summary>
            <param name="msg">The input message.</param>
            <returns>
            (result, null), being result the resulting object, <br />
            (null, response), being response a response string, or <br />
            (null, null) for an interrupt signal.
            </returns>
        </member>
        <member name="T:Library.Core.State">
            <summary>
            This class represents a state of a user session.
            </summary>
        </member>
        <member name="M:Library.Core.State.ProcessMessage(Library.Core.UserId,Library.Core.UserData,System.String)">
            <summary>
            Processes a received message, returning the next state and the response message.
            </summary>
            <param name="id">The user's id.</param>
            <param name="data">The user's data.</param>
            <param name="msg">The message's text.</param>
            <returns>The next state and the response message.</returns>
        </member>
        <member name="T:Library.Core.Processing.State">
            <summary>
            This class represents a state of a user session.
            </summary>
        </member>
        <member name="M:Library.Core.Processing.State.ProcessMessage(Library.Core.UserId,Library.Core.UserData,System.String)">
            <summary>
            Processes a received message, returning the next state and the response message.
            </summary>
            <param name="id">The user's id.</param>
            <param name="data">The user's data.</param>
            <param name="msg">The message's text.</param>
            <returns>The next state and the response message.</returns>
        </member>
        <member name="T:Library.Core.UserData">
            <summary>
            This class represents additional data that all users must have.
            </summary>
        </member>
        <member name="F:Library.Core.UserData.Name">
            <summary>
            The user's name.
            </summary>
        </member>
        <member name="F:Library.Core.UserData.ContactInfo">
            <summary>
            The user's contact information.
            </summary>
        </member>
        <member name="T:Library.Core.UserId">
            <summary>
            This class acts as a unique identifier for each user in the platform.
            Different subclasses of this class represent ids of user of different messaging platforms.
            </summary>
        </member>
        <member name="M:Library.Core.UserId.Equals(Library.Core.UserId)">
            <summary>
            Compares the equality of two <see cref="T:Library.Core.UserId" />s.
            </summary>
            <param name="other">The other id.</param>
            <returns>Whether the two ids are equal or not.</returns>
        </member>
        <member name="T:Library.HighLevel.Accountability.Amount">
            <summary>
            This struct represents an amount of material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Amount.Quantity">
            <summary>
            The numeric value in the amount.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Amount.Unit">
            <summary>
            The unit used in the amount.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.HighLevel.Accountability.Amount.#ctor(System.Single,Library.HighLevel.Accountability.Unit)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Accountability.Amount" />.
            </summary>
            <param name="quantity">The numeric value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.Currency">
            <summary>
            This class represents a currency with which transactions can be made.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Currency.Name">
            <summary>
            The currency's name.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Currency.Symbol">
            <summary>
            The currency's symbol.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Currency.Peso">
            <summary>
            The uruguayan peso.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Currency.Dollar">
            <summary>
            The american dollar.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Accountability.Location">
            <summary>
            This class represents a location in the world.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.Location.Distance(Library.HighLevel.Accountability.Location,Library.HighLevel.Accountability.Location)">
            <summary>
            Calculates the distance between two <see cref="T:Library.HighLevel.Accountability.Location" />s.
            </summary>
            <param name="l1">The first location.</param>
            <param name="l2">The second location.</param>
            <returns>The distance between the two locations, in kilometers.</returns>
        </member>
        <member name="T:Library.HighLevel.Accountability.MaterialSalesLine">
            <summary>
            This class represents a concrete material sale.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MaterialSalesLine.Material">
            <summary>
            The sold material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MaterialSalesLine.Amount">
            <summary>
            The amount of sold material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MaterialSalesLine.Price">
            <summary>
            The price of the sold material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MaterialSalesLine.DateTime">
            <summary>
            The moment the sale happened.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Accountability.MaterialSalesLine.Income">
            <summary>
            The amount of money made from this sale.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.MaterialSalesLine.#ctor(Library.HighLevel.Materials.Material,Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price,System.DateTime)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Accountability.MaterialSalesLine" />.
            </summary>
            <param name="material">The sold material.</param>
            <param name="amount">The amount of sold material.</param>
            <param name="price">The price of the sold material.</param>
            <param name="dateTime">The moment the sale happened.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.Measure">
            <summary>
            This class represents a measure through which a certain amount of material can be measured.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Measure.Name">
            <summary>
            The measure's name.
            </summary>
            <value></value>
        </member>
        <member name="F:Library.HighLevel.Accountability.Measure.units">
            <summary>
            The measure's available units.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.Measure.#ctor(System.String,System.ValueTuple{System.String,System.String,System.Double}[])">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Accountability.Measure" />, assigning its units in the process.
            </summary>
            <param name="name">The measure's name.</param>
            <param name="unitsData">An array of tuples containing data about its units.</param>
        </member>
        <member name="F:Library.HighLevel.Accountability.Measure.Length">
            <summary>
            The length measure.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Measure.Weight">
            <summary>
            The weight measure.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Accountability.MoneyQuantity">
            <summary>
            This class represents an amount of money.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MoneyQuantity.Quantity">
            <summary>
            The numeric value.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.MoneyQuantity.Currency">
            <summary>
            The currency.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.MoneyQuantity.#ctor(System.Single,Library.HighLevel.Accountability.Currency)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Accountability.MoneyQuantity" />
            </summary>
            <param name="quantity">The numeric value.</param>
            <param name="currency">The currency.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.MoneyQuantityUtils">
            <summary>
            This class offers functions associated with the <see cref="T:Library.HighLevel.Accountability.MoneyQuantity" /> struct.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.MoneyQuantityUtils.Calculate(Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price)">
            <summary>
            Calculates the amount of money made from selling a certain amount of material at a certain price.
            </summary>
            <param name="amount">The amount of material.</param>
            <param name="price">The price of the material.</param>
            <returns>The resulting <see cref="T:Library.HighLevel.Accountability.MoneyQuantity" />, or null if the amount and price are invalid with each other.</returns>
        </member>
        <member name="T:Library.HighLevel.Accountability.Price">
            <summary>
            This struct represents a price.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Accountability.Price.Quantity">
            <summary>
            The numeric value.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Accountability.Price.Currency">
            <summary>
            The currency with which the price is determined.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Accountability.Price.Unit">
            <summary>
            The unit of material measurement with which the price is determined.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.HighLevel.Accountability.Price.#ctor(System.Single,Library.HighLevel.Accountability.Currency,Library.HighLevel.Accountability.Unit)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Accountability.Price" />.
            </summary>
            <param name="quantity"></param>
            <param name="currency"></param>
            <param name="unit"></param>
        </member>
        <member name="T:Library.HighLevel.Accountability.SentMaterialReport">
            <summary>
            This class represents a report of all materials a company sold over a certain period of time.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.SentMaterialReport.Lines">
            <summary>
            The list of material sales.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.SentMaterialReport.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Library.HighLevel.Accountability.MaterialSalesLine})">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Accountability.SentMaterialReport"/>.
            </summary>
            <param name="lines">The report's list of material sales.</param>
        </member>
        <member name="T:Library.HighLevel.Accountability.Unit">
            <summary>
            This class represent a unit used for measuring amounts of material.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.Name">
            <summary>
            The unit's name.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.Abbreviation">
            <summary>
            The unit's abbreviation.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.weight">
            <summary>
            A weight associated to the unit to perform conversions with other units of the same measure.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.Measure">
            <summary>
            The measure form which the unit is.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Accountability.Unit.values">
            <summary>
            The list of available units.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Accountability.Unit.GetByAbbr(System.String)">
            <summary>
            Gets the unit which has a concrete abbreviation.
            </summary>
            <param name="abbreviation">The unit's abbreviation.</param>
            <returns></returns>
        </member>
        <member name="M:Library.HighLevel.Accountability.Unit.GetConversionFactor(Library.HighLevel.Accountability.Unit,Library.HighLevel.Accountability.Unit)">
            <summary>
            Calculates the conversion factor to translate measures from a unit to another.
            </summary>
            <param name="fromUnit">The unit of the initial measure.</param>
            <param name="toUnit">The unit of the final measure.</param>
            <returns>The number to multiply to the initial measure's numeric value to get the final measure's numeric value, or null if the units belong to different measures.</returns>
        </member>
        <member name="T:Library.HighLevel.Companies.Company">
            <summary>
            This class represents a company which can sell materials to entrepreneurs.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.Name">
            <summary>
            The company's name.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.contactInfo">
            <summary>
            The company's contact information.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.Company.Heading">
            <summary>
            The company's heading.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Companies.Company.representants">
            <summary>
            The company's representants in the platform.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.Company.#ctor(System.String,Library.Core.ContactInfo,System.String)">
            
        </member>
        <member name="M:Library.HighLevel.Companies.Company.HasUser(Library.Core.UserId)">
            <summary>
            Returns whether a user represents this company.
            </summary>
            <param name="id">The user's id.</param>
            <returns>Whether it belongs to the company.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.Company.AddUser(Library.Core.UserId)">
            <summary>
            Adds a user into the list of representants.
            </summary>
            <param name="id">The user's id.</param>
        </member>
        <member name="T:Library.HighLevel.Companies.CompanyInvitation">
            <summary>
            Represents an invitation to the platform for a company representative.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyInvitation.#ctor(System.String)">
            
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyInvitation.Validate(Library.Core.UserId)">
            <inheritdoc />
        </member>
        <member name="T:Library.HighLevel.Companies.CompanyManager">
            <summary>
            This class represents the highest level of encapsulation in handling companies.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyManager.GetCompanyOf(Library.Core.UserId)">
            <summary>
            Gets the company a concrete user represents.
            </summary>
            <param name="userId">The user's id.</param>
            <returns>A company, or null if the user doesn't represent a company.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyManager.GetCompaniesWithNamesSimilarTo(System.String)">
            <summary>
            Gets an enumerable of companies whose names are similar to a given one.
            </summary>
            <param name="name">The company name to compare.</param>
            <returns>A list of companies.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyManager.GetByName(System.String)">
            <summary>
            Gets the <see cref="T:Library.HighLevel.Companies.Company" /> with a concrete name.
            </summary>
            <param name="name">The company's name.</param>
            <returns>A company, or null if there is no company with that name.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.CompanyManager.CreateCompany(System.String,Library.Core.ContactInfo,System.String)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Companies.Company" />, adding it to the list.
            </summary>
            <returns>The created instance, or null if there's already a company with the same name.</returns>
        </member>
        <member name="T:Library.HighLevel.Companies.IPublisher">
            <summary>
            This class represents the responsibility of managing material publications.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.IPublisher.publications">
            <summary>
            A private list of the publications.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.IPublisher.Publications">
            <summary>
            A public read-only list of the publications.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.IPublisher.PublishMaterial(Library.HighLevel.Materials.Material,Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price,Library.HighLevel.Accountability.Location)">
            <summary>
            Publishes a material.
            </summary>
            <param name="material">The material to publish.</param>
            <param name="amount">The amount of material.</param>
            <param name="price">The price of the material.</param>
            <param name="location">The pick-up location of the material.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Library.HighLevel.Companies.IPublisher.RemovePublication(System.Int32)">
            <summary>
            Removes a material publication.
            </summary>
            <param name="index">The index of the publication.</param>
            <returns>Whether the removal was successful.</returns>
        </member>
        <member name="T:Library.HighLevel.Companies.ISentMaterialReportCreator">
            <summary>
            This interface represents the responsibility of creating material reports.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Companies.ISentMaterialReportCreator.materialSales">
            <summary>
            The list of material sales.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Companies.ISentMaterialReportCreator.GetMaterialReport(System.DateTime)">
            <summary>
            Builds a <see cref="T:Library.HighLevel.Accountability.SentMaterialReport" /> with the material sales that occured after a certain <see cref="T:System.DateTime" />.
            </summary>
            <param name="dateTime">The lower limit of the moment the sales happened.</param>
            <returns>The <see cref="T:Library.HighLevel.Accountability.SentMaterialReport" /></returns>
        </member>
        <member name="T:Library.HighLevel.Materials.Habilitation">
            <summary>
            This abstract class represents habilitations entrepreneurs can possess,
            which are necessary to meet certain material manipulation requirements.
            </summary>
        </member>
        <member name="T:Library.HighLevel.Materials.Material">
            <summary>
            This class represents a type of material which can be sold by companies and purchased by entrepreneurs.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.Material.Name">
            <summary>
            The material's name.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.Material.Measure">
            <summary>
            The measure with which the amounts of the material are measured.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.Material.requirements">
            <summary>
            A private list of the requirements which are needed to manipulate this material.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.Material.Requirements">
            <summary>
            A public read-only list of the requirements which are needed to manipulate this material.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Library.HighLevel.Materials.Material.Category">
            <summary>
            The category the material belongs to.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.Material.CreateInstance(System.String,Library.HighLevel.Accountability.Measure,System.Collections.Generic.IEnumerable{Library.HighLevel.Materials.Requirement},Library.HighLevel.Materials.MaterialCategory)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Materials.Material" />, adding it to the collection of materials of its category in the process.
            </summary>
            <param name="name">The material's name.</param>
            <param name="measure">The material's measure.</param>
            <param name="requirements">The material's requirements.</param>
            <param name="category">The material's category</param>
            <returns>A <see cref="T:Library.HighLevel.Materials.Material" /> instance.</returns>
        </member>
        <member name="T:Library.HighLevel.Materials.MaterialCategory">
            <summary>
            This class represents a category of materials, through which they can be easily classified.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialCategory.Name">
            <summary>
            The category's name.
            </summary>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialCategory.Categories">
            <summary>
            The list of existent categories.
            </summary>
            <value></value>
        </member>
        <member name="F:Library.HighLevel.Materials.MaterialCategory.Materials">
            <summary>
            The list of materials which belong to this category.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialCategory.GetByName(System.String)">
            <summary>
            Gets a concrete <see cref="T:Library.HighLevel.Materials.MaterialCategory" /> given its name.
            </summary>
            <param name="name">The category's name.</param>
            <returns>An instance of <see cref="T:Library.HighLevel.Materials.MaterialCategory" />.</returns>
        </member>
        <member name="T:Library.HighLevel.Materials.MaterialPublication">
            <summary>
            This class represents a publication of a material from a company.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.Material">
            <summary>
            The publication's material.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.Amount">
            <summary>
            The publication's amount of material.
            </summary>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.Price">
            <summary>
            The publication's price of the material.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.HighLevel.Materials.MaterialPublication.PickupLocation">
            <summary>
            The publication's pick-up location of material.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialPublication.CheckMaterialFields(Library.HighLevel.Materials.Material,Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price)">
            <summary>
            Checks whether the given fields for building a <see cref="T:Library.HighLevel.Materials.MaterialPublication" /> are valid with each other.
            That is, whether the material, amount and price are described under the same measure.
            </summary>
            <param name="material">The material.</param>
            <param name="amount">The amount of material.</param>
            <param name="price">The price of the material.</param>
            <returns>Whether the data is valid with itself.</returns>
        </member>
        <member name="M:Library.HighLevel.Materials.MaterialPublication.CreateInstance(Library.HighLevel.Materials.Material,Library.HighLevel.Accountability.Amount,Library.HighLevel.Accountability.Price,Library.HighLevel.Accountability.Location)">
            <summary>
            Creates an instance of <see cref="T:Library.HighLevel.Materials.MaterialPublication" />, validating the data beforehand.
            </summary>
            <param name="material">The material.</param>
            <param name="amount">The amount of material.</param>
            <param name="price">The price of the material.</param>
            <param name="pickupLocation">The pick-up location of the material.</param>
            <returns>A <see cref="T:Library.HighLevel.Materials.MaterialPublication" />, or null if the data is invalid.</returns>
        </member>
        <member name="T:Library.HighLevel.Materials.Requirement">
            <summary>
            This class represents a requirement to manipulate certain materials.
            </summary>
        </member>
        <member name="M:Library.HighLevel.Materials.Requirement.IsSatisfiedBy(Library.HighLevel.Materials.Habilitation)">
            <summary>
            Checks if the requirement is satisfied by a concrete <see cref="T:Library.HighLevel.Materials.Habilitation" />.
            </summary>
            <param name="habilitation">The habilitation.</param>
            <returns>Whether the requirement is satisfied by the habilitation.</returns>
        </member>
        <member name="M:Library.HighLevel.Materials.Requirement.FullCheck(System.Collections.Generic.IEnumerable{Library.HighLevel.Materials.Requirement},System.Collections.Generic.IEnumerable{Library.HighLevel.Materials.Habilitation})">
            <summary>
            Checks if all the given requirements are satisfied by the given habilitations.
            </summary>
            <param name="requirements">The requirements to check.</param>
            <param name="habilitations">The habilitations to compare with.</param>
            <returns>Whether all the given requirements are satisfied by the given habilitations.</returns>
        </member>
        <member name="T:Library.InputHandlers.Abstractions.PipeProcessor`1">
            <summary>
            This class represents an input processor which takes the result of another one and applies a transformation to it.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Library.InputHandlers.Abstractions.PipeProcessor`1.CreateInstance``1(System.Func{``0,System.ValueTuple{`0,System.String}},Library.Core.Processing.IInputProcessor{``0})">
            <summary>
            Creates a pipe processor.
            </summary>
            <param name="func">The transformation function.</param>
            <param name="processor">The inner <see cref="T:Library.Core.Processing.IInputProcessor`1" />.</param>
            <typeparam name="U">The type of the objects the inner <see cref="T:Library.Core.Processing.IInputProcessor`1" /> returns.</typeparam>
        </member>
        <member name="T:Library.InputHandlers.Abstractions.ProcessorWrapper`1">
            <summary>
            Act as a type wrapper for a specific type of <see cref="T:Library.Core.Processing.IInputProcessor`1" />
            </summary>
            <typeparam name="T">The type the inner processor returns.</typeparam>
        </member>
        <member name="M:Library.InputHandlers.Abstractions.ProcessorWrapper`1.#ctor(Library.Core.Processing.IInputProcessor{`0})">
            
        </member>
        <member name="T:Library.InputHandlers.BasicInputHandler">
            <summary>
            Represents an <see cref="T:Library.Core.Processing.IInputHandler" /> which uses an input processor, and a function to be given its result.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.BasicInputHandler.#ctor(System.Func{System.String,System.ValueTuple{System.Boolean,System.String}},System.Func{System.String},System.Action)">
            
        </member>
        <member name="M:Library.InputHandlers.BasicInputHandler.CreateInstance``1(System.Action{``0},Library.Core.Processing.IInputProcessor{``0})">
            <summary>
            Creates a <see cref="T:Library.InputHandlers.BasicInputHandler" />.
            </summary>
            <param name="action">The operation to do with the resulting input.</param>
            <param name="processor">The input processor.</param>
            <typeparam name="T">The type of the object the input processor returns, which is used by the "action" operation.</typeparam>
        </member>
        <member name="T:Library.InputHandlers.BasicStringProcessor">
            <summary>
            Generates a string from a single input message, after trimming it.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.BasicStringProcessor.#ctor(System.Func{System.String})">
            <summary>
            Creates an instance of <see cref="T:Library.InputHandlers.BasicStringProcessor" /> with the given default response getter.
            </summary>
            <param name="initialResponseGetter">The default response getter.</param>
        </member>
        <member name="T:Library.InputHandlers.EmailProcessor">
            <summary>
            Represents a processor who parses an email from input.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.EmailProcessor.#ctor(System.Func{System.String})">
            
        </member>
        <member name="T:Library.InputHandlers.PhoneNumberProcessor">
            <summary>
            Represent an input processor with processes a phone number from input.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.PhoneNumberProcessor.#ctor(System.Func{System.String})">
            
        </member>
        <member name="T:Library.InputHandlers.UnsignedInt32Processor">
            <summary>
            Represent an input processor with processes an integer from input.
            </summary>
        </member>
        <member name="M:Library.InputHandlers.UnsignedInt32Processor.#ctor(System.Func{System.String})">
            
        </member>
        <member name="T:Library.Platforms.Telegram.Secret">
            <summary>
            This class stores secret data whose access has to be carefully managed.
            </summary>
        </member>
        <member name="F:Library.Platforms.Telegram.Secret.TELEGRAM_BOT_TOKEN">
            <summary>
            The bot's secret token.
            </summary>
        </member>
        <member name="T:Library.Platforms.Telegram.TelegramBot">
            <summary>
            This class represents the program's telegram bot.
            </summary>
        </member>
        <member name="M:Library.Platforms.Telegram.TelegramBot.GetUserId(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Library.Platforms.Telegram.TelegramBot.SendMessage(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="F:Library.Platforms.Telegram.TelegramBot.Client">
            <summary>
            The <see cref="T:Telegram.Bot.ITelegramBotClient" /> which is used to send and receive messages.
            </summary>
        </member>
        <member name="P:Library.Platforms.Telegram.TelegramBot.BotId">
            <summary>
            The bot's Telegram id.
            </summary>
        </member>
        <member name="P:Library.Platforms.Telegram.TelegramBot.BotName">
            <summary>
            The bot's Telegram name.
            </summary>
        </member>
        <member name="F:Library.Platforms.Telegram.TelegramBot.Instance">
            <summary>
            The <see cref="T:Library.Platforms.Telegram.TelegramBot" /> class' single instance.
            </summary>
        </member>
        <member name="M:Library.Platforms.Telegram.TelegramBot.ReceiveMessages(System.Action)">
            <summary>
            Starts receiving messages until a certain function (which blocks the thread) returns.
            </summary>
            <param name="blockingAction">The function which blocks the thread.</param>
        </member>
        <member name="T:Library.Platforms.Telegram.TelegramId">
            <summary>
            This class represents <see cref="T:Library.Core.UserId" />s of Telegram users.
            </summary>
        </member>
        <member name="F:Library.Platforms.Telegram.TelegramId.ChatId">
            <summary>
            The id of the user.
            </summary>
        </member>
        <member name="M:Library.Platforms.Telegram.TelegramId.#ctor(System.Int64)">
            <summary>
            Creates an instance of <see cref="T:Library.Platforms.Telegram.TelegramId" />.
            </summary>
            <param name="chatId">The Telegram id.</param>
        </member>
        <member name="M:Library.Platforms.Telegram.TelegramId.Equals(Library.Core.UserId)">
            <summary>
            Checks the equality two <see cref="T:Library.Core.UserId" />s.
            </summary>
            <param name="other">The other id.</param>
            <returns>Whether the two ids are equal or not.</returns>
        </member>
        <member name="T:Library.RefWrapper`1">
            <summary>
            This class acts as a boxed wrapped around a valued type,
            so it can be used in contexts where a class type is expected.
            </summary>
            <typeparam name="T">The valued type.</typeparam>
        </member>
        <member name="F:Library.RefWrapper`1.value">
            <summary>
            The inner value;
            </summary>
        </member>
        <member name="M:Library.RefWrapper`1.#ctor(`0)">
        </member>
        <member name="T:Library.Singleton`1">
            <summary>
            This class represents classes which are supposed to have only one instance.
            </summary>
            <typeparam name="T">The class which has only one instance.</typeparam>
        </member>
        <member name="F:Library.Singleton`1.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="T:Library.States.IncompleteCompanyRepresentativeState">
            <summary>
            This class represents the state of a company representative who is yet to be fully logged in to the platform.
            </summary>
        </member>
        <member name="M:Library.States.IncompleteCompanyRepresentativeState.ProcessMessage(Library.Core.UserId,Library.Core.UserData,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Library.States.InitialMenuState">
            <summary>
            This class represents a mock user state, in which the bot returns every message it receives.
            </summary>
        </member>
        <member name="M:Library.States.InitialMenuState.ProcessMessage(Library.Core.UserId,Library.Core.UserData,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Library.Utils">
            <summary>
            This class stores context-generic static methods.
            </summary>
        </member>
    </members>
</doc>
